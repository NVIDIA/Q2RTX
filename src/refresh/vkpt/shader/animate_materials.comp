/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// There are animated materials on static world objects such as blinking signs,
// and these materials are updated by executing this shader twice a second.
// This shader will advance all world triangles to their next material.

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "utils.glsl"

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define VERTEX_BUFFER_DESC_SET_IDX 1
#include "vertex_buffer.h"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void
main()
{
	uint prim = gl_GlobalInvocationID.x;

	if(prim >= global_ubo.num_static_primitives)
		return;

	uint material = primitive_buffers[VERTEX_BUFFER_WORLD].primitives[prim].material_id;
	uint new_material = material;
	MaterialInfo minfo = get_material_info(material);

	if((material & MATERIAL_KIND_MASK) == MATERIAL_KIND_CAMERA && global_ubo.num_cameras > 1)
	{
		uint camera_id = (material & MATERIAL_LIGHT_STYLE_MASK) >> MATERIAL_LIGHT_STYLE_SHIFT;
		camera_id = (camera_id + 1) % (global_ubo.num_cameras * 4);
		new_material = (material & ~MATERIAL_LIGHT_STYLE_MASK) | ((camera_id << MATERIAL_LIGHT_STYLE_SHIFT) & MATERIAL_LIGHT_STYLE_MASK);
	}

	if(minfo.num_frames > 1)
	{
		new_material = minfo.next_frame | (new_material & ~MATERIAL_INDEX_MASK);
	}

	if(new_material != material)
	{
		primitive_buffers[VERTEX_BUFFER_WORLD].primitives[prim].material_id = new_material;
	}
}


/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader performs compositing of lighting calculations into the final
// color, when the denoiser is disabled (flt_enable = 0).
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "global_textures.h"

#include "utils.glsl"
#include "brdf.glsl"

void
main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, ivec2(global_ubo.current_gpu_slice_width, global_ubo.height))))
		return;

	// Load the surface parameters
	vec3 normal = decode_normal(texelFetch(TEX_PT_NORMAL_A, ipos, 0).x);
	vec2 metallic_roughness = texelFetch(TEX_PT_METALLIC_A, ipos, 0).rg;
	int checkerboard_flags = int(texelFetch(TEX_PT_VIEW_DIRECTION, ipos, 0).w);
	float metallic = metallic_roughness.x;
	
	// Load the lighting info
	vec3 low_freq = texelFetch(TEX_PT_COLOR_LF_SH, ipos, 0).rgb;
	vec3 high_freq = unpackRGBE(texelFetch(TEX_PT_COLOR_HF, ipos, 0).x);
	vec3 specular = unpackRGBE(texelFetch(TEX_PT_COLOR_SPEC, ipos, 0).x);
	vec3 throughput = texelFetch(TEX_PT_THROUGHPUT, ipos, 0).rgb;
	
	low_freq /= STORAGE_SCALE_LF;
	high_freq /= STORAGE_SCALE_HF;
	specular /= STORAGE_SCALE_SPEC;

	// Load the other image channels
	vec3 base_color = texelFetch(TEX_PT_BASE_COLOR_A, ipos, 0).rgb;
	vec2 metal_rough = texelFetch(TEX_PT_METALLIC_A, ipos, 0).rg;
	vec4 transparent = texelFetch(TEX_PT_TRANSPARENT, ipos, 0);

	// Composite
	vec3 final_color = composite_color(base_color.rgb, metal_rough.r, throughput, low_freq, high_freq, specular, transparent);

	final_color *= STORAGE_SCALE_HDR;
	
	imageStore(IMG_ASVGF_COLOR, ipos, vec4(final_color, checkerboard_flags));
}


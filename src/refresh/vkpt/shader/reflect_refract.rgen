/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader shoots reflection or refraction rays from the primary surface,
// and stores the hit results in the G-buffer textures.
//
// See `path_tracer.h` for an overview of the path tracer.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#pragma optionNV(unroll all)

#define ENABLE_SHADOW_CAUSTICS
#define ENABLE_SUN_SHAPE
#include "path_tracer_rgen.h"
#include "path_tracer_transparency.glsl"
#include "projection.glsl"

layout(constant_id = 0) const uint spec_bounce_index = 0;

vec3 reflect_point_vs_plane(vec3 plane_pt, vec3 plane_normal, vec3 point)
{
	return point - 2 * plane_normal * dot(plane_normal, point - plane_pt);
}

float ray_distance_to_plane(vec3 plane_pt, vec3 plane_normal, vec3 ray_origin, vec3 ray_direction)
{
	return dot(plane_pt - ray_origin, plane_normal) / dot(ray_direction, plane_normal);
}

Ray
get_primary_ray(vec2 screen_pos)
{
	vec3 view_dir = projection_screen_to_view(screen_pos, 1, false);
	view_dir = normalize((global_ubo.invV * vec4(view_dir, 0)).xyz);

	Ray ray;
	ray.origin = global_ubo.cam_pos.xyz;
	ray.direction = view_dir;
	ray.t_min = 0;
	ray.t_max = 10000;
	return ray;
}

void
main() 
{
	ivec2 ipos = ivec2(rt_LaunchID.xy);
	if(rt_LaunchID.z != 0)
		ipos.x += global_ubo.width / 2;

	vec4 position_material = imageLoad(IMG_PT_SHADING_POSITION, ipos);
	
	vec3 position   = position_material.xyz;
	uint material_id = floatBitsToUint(position_material.w);

	bool primary_is_water = is_water(material_id);
	bool primary_is_slime = is_slime(material_id);
	bool primary_is_glass = is_glass(material_id);
	bool primary_is_chrome = is_chrome(material_id);
	bool primary_is_screen = is_screen(material_id);
	bool primary_is_camera = is_camera(material_id);
	bool primary_is_transparent = is_transparent(material_id);

	if(!( primary_is_water || 
		  primary_is_slime || 
		  primary_is_glass || 
		  primary_is_chrome || 
		  primary_is_screen || 
		  primary_is_camera || 
		  primary_is_transparent ))
		return;

	bool is_odd_checkerboard = (rt_LaunchID.z != 0) || (push_constants.gpu_index == 1);

	rng_seed = texelFetch(TEX_ASVGF_RNG_SEED_A, ipos, 0).r;

	vec4 view_direction = imageLoad(IMG_PT_VIEW_DIRECTION, ipos);
	vec3 direction = view_direction.xyz;
	int checkerboard_flags = int(view_direction.w);
	// Different from primary_is_weapon - this carries over through reflections and refractions
	int checkerboard_weapon_flag = checkerboard_flags & CHECKERBOARD_FLAG_WEAPON;
	checkerboard_flags &= CHECKERBOARD_FLAG_FIELD_MASK;

	vec4 throughput_distance = imageLoad(IMG_PT_THROUGHPUT, ipos);
	vec3 throughput = throughput_distance.rgb;
	float optical_path_length = throughput_distance.a;
	vec4 transparent = imageLoad(IMG_PT_TRANSPARENT, ipos);
	vec3 primary_base_color = imageLoad(IMG_PT_BASE_COLOR_A, ipos).rgb;
	vec3 geo_normal = decode_normal(imageLoad(IMG_PT_GEO_NORMAL_A, ipos).x);
	vec3 normal = decode_normal(imageLoad(IMG_PT_NORMAL_A, ipos).x);
	uint cluster_idx = imageLoad(IMG_PT_CLUSTER_A, ipos).r;
	
	int primary_medium = int(material_id & MATERIAL_LIGHT_STYLE_MASK) >> MATERIAL_LIGHT_STYLE_SHIFT;
	bool primary_is_weapon = (material_id & MATERIAL_FLAG_WEAPON) != 0;
	
	int correct_motion_vector = 0; // 1 -> flat reflection, 2 -> flat refraction
	bool include_player_model = !primary_is_weapon;
	bool backface_culling = true;
	
	// Process reflection or refraction.
	// Each pixel follows either the reflected or the refracted path, depending on 
	// the material, incident vector, and checkerboard field. For more information
	// about checkerboarded reflections and refractions, see the comments in file
	// `checkerboard_interleave.comp`.

	if(primary_is_water || primary_is_slime)
	{
		// Water and slime are very similar, the only difference is the extinction coefficients.
		vec3 reflected_direction = reflect(direction, normal);
		float n_dot_v = abs(dot(direction, normal));

		const float index_of_refraction = 1.34;

		if(primary_medium != MEDIUM_NONE)
		{
			// Looking up from under water
			vec3 refracted_direction = refract(direction, normal, index_of_refraction);

			// Adjust N.V to make the Fresnel term work under water and blend smoothly with total internal reflection
			n_dot_v = 1.0 - (1.0 - n_dot_v) * 3;

			if(n_dot_v <= 0.0 || dot(refracted_direction, refracted_direction) == 0.0)
			{
				// Total internal reflection - single ray
				direction = reflected_direction;
				if(spec_bounce_index == 0)
				{
					checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION;
				}
	 			correct_motion_vector = 1;
			}
			else
			{
				// Mix of reflection and refraction
				float F = pow(1.0 - n_dot_v, 5.0);
				
				float correction_factor;

				bool do_split;
				bool do_refraction;
				if(spec_bounce_index == 0)
				{
					do_split = true;
					do_refraction = is_odd_checkerboard;
				}
				else
				{
					do_split = bitCount(checkerboard_flags) == 1;
					do_refraction = do_split ? is_odd_checkerboard : (F < 0.1);
				}

				if(do_refraction)
				{
					direction = refracted_direction;
					correction_factor = (1 - F);
					primary_medium = MEDIUM_NONE;
	 				correct_motion_vector = 2;
				}
				else
				{
					direction = reflected_direction;
			 		correction_factor = F;
	 				correct_motion_vector = 1;
				}

				if(do_split)
				{
					correction_factor *= 2;
					checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION | CHECKERBOARD_FLAG_REFRACTION;
				}

				throughput *= correction_factor;
			}

			include_player_model = false; // hide the player model from reflections or refractions
		}
		else
		{
			// Looking down on water surface
			vec3 refracted_direction = refract(direction, normal, 1.0 / index_of_refraction);

			// Fresnel
			float F = 0.1 + 0.9 * pow(1.0 - n_dot_v, 5.0);

			// Since our sampling PDF doesn't match the actual blending factor, we need to correct the result intensity
			float correction_factor;

			bool do_split;
			bool do_refraction;
			if(spec_bounce_index == 0)
			{
				do_split = true;
				do_refraction = is_odd_checkerboard;
			}
			else
			{
				do_split = bitCount(checkerboard_flags) == 1;
				do_refraction = do_split ? is_odd_checkerboard : (F < 0.1);
			}

			if(do_refraction)
			{
				// Refraction
				primary_medium = primary_is_water ? MEDIUM_WATER : primary_is_slime ? MEDIUM_SLIME : MEDIUM_NONE;
				direction = refracted_direction;
				correction_factor = (1 - F);
				include_player_model = false; // hide the player model from refractions
	 			correct_motion_vector = 2;
			}
			else
			{
				// Reflection
				direction = reflect(direction, normal);
			 	correction_factor = F;
	 			correct_motion_vector = 1;
			}

			if(do_split)
			{
				correction_factor *= 2;
				checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION | CHECKERBOARD_FLAG_REFRACTION;
			}

			throughput *= correction_factor;
		}

	}
	else if(primary_is_screen)
	{
		// Screens are "black mirrors", i.e. a material that has a Fresnel reflection,
		// no refraction, and an emissive component.

		float n_dot_v = abs(dot(direction, normal));
		float F = 0.05 + 0.95 * pow(1.0 - n_dot_v, 5.0);

		throughput *= F;

		direction = reflect(direction, normal);

		if(checkerboard_flags == CHECKERBOARD_FLAG_PRIMARY)
			checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION;

		correct_motion_vector = 1;
	}
	else if(primary_is_camera)
	{
		normal = geo_normal;
		uint packedUV = imageLoad(IMG_PT_NORMAL_A, ipos).x;

		vec2 uv;
		uv.x = float(packedUV & 0x3fff) / float(0x3fff);
		uv.y = float((packedUV >> 14) & 0x3fff) / float(0x3fff);

		uint camera_id = (packedUV >> 28) & (MAX_CAMERAS - 1);

		mat4 camera_data = global_ubo.security_camera_data[camera_id];
		position = camera_data[0].xyz;
		direction = camera_data[1].xyz + camera_data[2].xyz * uv.x + camera_data[3].xyz * uv.y;
		direction = normalize(direction);
	}
	else if(primary_is_chrome)
	{
		// Chrome is just reflective metal

		throughput *= primary_base_color;
		
		direction = reflect(direction, normal);

		if(spec_bounce_index == 0)
		{
			if (checkerboard_flags == CHECKERBOARD_FLAG_PRIMARY)
				checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION;

			// Don't compute MVs or do surface replacement for dynamic models.
			// Dynamic models are usually moving or curved, which makes MVs incorrect,
			// and such models look better with just primary motion vectors.
			if((material_id & MATERIAL_KIND_MASK) != MATERIAL_KIND_CHROME_MODEL)
				correct_motion_vector = 1;
		}
	}
	else if(primary_is_transparent)
	{
		// This is a non-physical see-through material.
		// One ray stops at the primary surface, the other goes through it.

		correct_motion_vector = 2;

		// Apply a very light distortion effect to TRANS walls (but not models with alpha)
		if((material_id & MATERIAL_KIND_MASK) == MATERIAL_KIND_TRANSPARENT)
		{
			// This is the ray that goes through.
			float index_of_refraction = 1.005;

			// Assume infinitely thin glass, compute dual refraction:
			// ray goes into the glass with the normal map, goes out on the other side which is flat.
			vec3 refracted1 = refract(direction, normal, 1.0 / index_of_refraction);
			vec3 refracted2 = refract(refracted1, geo_normal, index_of_refraction);

			if(length(refracted2) > 0)
			{
				// If this refraction path is possible, follow it.
				// Otherwise, just go through the glass unaffected.
				direction = refracted2;
				include_player_model = false; // hide the player model from refractions
			}
		}
	}
	else
	{
		// Glass
		float index_of_refraction = 1.52;

		float gn_dot_v = dot(direction, geo_normal);
		
		if(gn_dot_v > 0)
		{
			// looking at the back face somehow
			geo_normal = -geo_normal;
			normal = -normal;
			gn_dot_v = -gn_dot_v;
		}

		float n_dot_v = dot(direction, -normal);
		vec3 reflected_direction = reflect(direction, normal);

		if(global_ubo.pt_thick_glass == 2 || global_ubo.pt_thick_glass == 1 && global_ubo.flt_enable == 0)
		{
			float rand = get_rng(RNG_BRDF_FRESNEL(push_constants.bounce_index));
					
			if(primary_medium == MEDIUM_GLASS)
			{
				// Adjust N.V to make the Fresnel term blend smoothly with total internal reflection
				n_dot_v = 1.0 - (1.0 - n_dot_v) * 4;
			}
			else
			{
				index_of_refraction = 1.0 / index_of_refraction;
			}

			vec3 refracted_direction = refract(direction, normal, index_of_refraction);
			float correction_factor = 1;

			if(n_dot_v <= 0.0 || dot(refracted_direction, refracted_direction) == 0.0)
			{
				// Total internal reflection - single ray
				direction = reflected_direction;
	 			correct_motion_vector = 1;
			}
			else
			{
				// Mix of reflection and refraction
				float F = 0.05 + 0.95 * pow(1.0 - n_dot_v, 5.0);

				bool do_refraction;
				if(bitCount(checkerboard_flags) == 1)
				{
					// do a checkerboard split
					do_refraction = is_odd_checkerboard && F < 1;
					correction_factor = do_refraction ? 1 - F : F;
					correction_factor *= 2;
					checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION | CHECKERBOARD_FLAG_REFRACTION;
				}
				else if(global_ubo.flt_enable != 0)
				{
					// secondary surface, denoiser enabled - follow the most probable path
					do_refraction = F < 0.75;
					correction_factor = do_refraction ? 1 - F : F;
				}
				else
				{
					// secondary surface, reference mode - use importance sampling
					float corrected_F = clamp(F, 0.25, 0.75);
					do_refraction = corrected_F < rand;
					correction_factor = do_refraction ? (1 - F) / (1 - corrected_F) : F / corrected_F;
				}

				if(do_refraction)
				{
					direction = refracted_direction;
					if(primary_medium == MEDIUM_NONE)
					{
			 			throughput *= primary_base_color;
			 			primary_medium = MEDIUM_GLASS;
					}
					else
					{
			 			primary_medium = MEDIUM_NONE;
					}
					correct_motion_vector = 2;
				}
				else
				{
					direction = reflected_direction;
					correct_motion_vector = 1;
				}
			}

			throughput *= correction_factor;

			backface_culling = false;
		}
		else
		{

			float F = 0.05 + 0.95 * pow(1.0 - abs(n_dot_v), 5.0);

			if(dot(reflected_direction, geo_normal) < 0.01)
				F = 0;

			float correction_factor = 1;

			bool do_split;
			bool do_refraction;
			if(spec_bounce_index == 0)
			{
				do_split = F > 0;
				do_refraction = is_odd_checkerboard;
			}
			else
			{
				do_split = bitCount(checkerboard_flags) == 1 && F > 0;
				do_refraction = do_split ? is_odd_checkerboard  : (F < 0.1);
			}

			if(do_refraction)
			{
				// Assume infinitely thin glass, compute dual refraction:
				// ray goes into the glass with the normal map, goes out on the other side which is flat.
				vec3 refracted1 = refract(direction, normal, 1.0 / index_of_refraction);
				vec3 refracted2 = refract(refracted1, geo_normal, index_of_refraction);

				if(length(refracted2) > 0)
				{
					// If this refraction path is possible, follow it.
					// Otherwise, just go through the glass unaffected.
					direction = refracted2;
					include_player_model = false; // hide the player model from refractions
				}

				correction_factor = (1 - F);
			 	throughput *= primary_base_color;
			 	correct_motion_vector = 2;
			}
			else
			{
				// Reflection
				direction = reflected_direction;
			 	correction_factor = F;
			 	correct_motion_vector = 1;
			}

			if(abs(dot(normal, geo_normal)) < 0.99999)
				correct_motion_vector = 0;

			if(do_split)
			{
				correction_factor *= 2;
				checkerboard_flags = CHECKERBOARD_FLAG_REFLECTION | CHECKERBOARD_FLAG_REFRACTION;
			}

			throughput *= correction_factor;
		}
	}

	int reflection_cull_mask = REFLECTION_RAY_CULL_MASK;
	if(global_ubo.first_person_model != 0 && include_player_model)
		reflection_cull_mask |= AS_FLAG_VIEWER_MODELS;
	else if (!(primary_is_weapon && primary_is_transparent))
		reflection_cull_mask |= AS_FLAG_VIEWER_WEAPON;

	if(push_constants.bounce_index < int(global_ubo.pt_reflect_refract - 1))
		reflection_cull_mask |= AS_FLAG_TRANSPARENT;

	Ray reflection_ray;
	reflection_ray.origin = position;
	reflection_ray.direction = direction;
	reflection_ray.t_min = 0;
	reflection_ray.t_max = PRIMARY_RAY_T_MAX;

	if(dot(direction, normal) >= 0)
		reflection_ray.origin -= view_direction.xyz * 0.01;
	else
		reflection_ray.origin -= normal.xyz * 0.001;

	trace_geometry_ray(reflection_ray, backface_culling, reflection_cull_mask);

	// Add the transparency encountered along the reflection ray

	Triangle triangle;

	if (found_intersection(ray_payload_geometry))
	{
		reflection_ray.t_max = ray_payload_geometry.hit_distance;
	 	triangle = get_hit_triangle(ray_payload_geometry);
	}

	vec4 effects = trace_effects_ray(reflection_ray, /* skip_procedural = */ false);
	transparent = alpha_blend_premultiplied(transparent, effects * vec4(throughput, 1));

	if(!found_intersection(ray_payload_geometry) || is_sky(triangle.material_id))
	{
		// Reflection ray hit the sky - store an empty surface into the G-buffer,
		// blend the environment under the transparency.

		vec3 env = env_map(direction, false);
		env *= global_ubo.pt_env_scale;

		transparent = alpha_blend(transparent, vec4(env * throughput, 1));

		material_id = (primary_medium << MATERIAL_LIGHT_STYLE_SHIFT) & MATERIAL_LIGHT_STYLE_MASK;

		imageStore(IMG_PT_NORMAL_A, ipos, uvec4(0));
		imageStore(IMG_PT_GEO_NORMAL_A, ipos, uvec4(0));
		imageStore(IMG_PT_BASE_COLOR_A, ipos, vec4(0));
		imageStore(IMG_PT_METALLIC_A, ipos, vec4(0));
		imageStore(IMG_PT_TRANSPARENT, ipos, transparent);
		imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(position + direction * PRIMARY_RAY_T_MAX, uintBitsToFloat(material_id)));
		imageStore(IMG_PT_VIEW_DIRECTION, ipos, vec4(direction, float(checkerboard_flags | checkerboard_weapon_flag)));
		imageStore(IMG_PT_VIEW_DEPTH_A, ipos, vec4(-PRIMARY_RAY_T_MAX));
		imageStore(IMG_PT_GODRAYS_THROUGHPUT_DIST, ipos, vec4(throughput, PRIMARY_RAY_T_MAX));
		
		return;
	}

	// Throughput before extinction
	imageStore(IMG_PT_GODRAYS_THROUGHPUT_DIST, ipos, vec4(throughput, ray_payload_geometry.hit_distance));

	if(primary_medium != MEDIUM_NONE)
	{
		// Extinction along the reflected/refracted ray
		throughput *= extinction(primary_medium, ray_payload_geometry.hit_distance);
	}

	vec3 bary         = get_hit_barycentric(ray_payload_geometry);
	vec2 tex_coord    = triangle.tex_coords * bary;
	vec3 new_position = triangle.positions * bary;
	vec3 new_pos_prev = triangle.positions_prev * bary;
	vec3 new_geo_normal = normalize(triangle.normals * bary);
	material_id    = triangle.material_id;
	cluster_idx    = triangle.cluster;

	vec3 new_flat_normal = normalize(cross(
		triangle.positions[1] - triangle.positions[0],
		triangle.positions[2] - triangle.positions[1]));
	
	float flat_normal_sign = (global_ubo.weapon_left_handed != 0 && (triangle.material_id & MATERIAL_FLAG_WEAPON) != 0) ? -1.0 : 1.0;
	
	if (dot(new_flat_normal, direction) * flat_normal_sign > 0)
		new_geo_normal = -new_geo_normal;
	
	// Compute the LOD for the texture on the reflected/refracted surface.
	// We don't have texture gradients here, so just estimate the LOD
	// based on the ray "cone size" and distance. The "cone size" is computed
	// in `primary_rays.rgen` and stored in the throughput texture.
	optical_path_length += ray_payload_geometry.hit_distance;

	float half_cone_angle = texelFetch(TEX_PT_BOUNCE_THROUGHPUT, ipos, 0).a;
	
	vec2 tex_coord_x, tex_coord_y;
	float fwidth_depth;
	compute_anisotropic_texture_gradients(new_position, new_flat_normal, direction, 
		optical_path_length * half_cone_angle, triangle.positions, 
		triangle.tex_coords, tex_coord, tex_coord_x, tex_coord_y, fwidth_depth);

	if(global_ubo.pt_texture_lod_bias != 0)
	{
		tex_coord_x *= pow(2.0, global_ubo.pt_texture_lod_bias);
		tex_coord_y *= pow(2.0, global_ubo.pt_texture_lod_bias);
	}

	if(correct_motion_vector == 1 && spec_bounce_index == 0 || correct_motion_vector == 2)
	{			
		vec3 ref_pos_curr, ref_pos_prev;
		vec3 ref_geo_normal;

		// compute the apparent position of the reflected or refracted object
		if(correct_motion_vector == 1)
		{
			ref_pos_curr = reflect_point_vs_plane(position, geo_normal, new_position);
			ref_pos_prev = reflect_point_vs_plane(position, geo_normal, new_pos_prev);
			ref_geo_normal = reflect(new_geo_normal, geo_normal);
		}
		else
		{
			ref_pos_curr = new_position;
			ref_pos_prev = new_pos_prev;
			ref_geo_normal = new_geo_normal;
		}


		// compute the motion vector assuming that the primary surface is a static plane
		vec2 screen_pos_curr, screen_pos_prev;
		float distance_curr, distance_prev;
		projection_view_to_screen((global_ubo.V * vec4(ref_pos_curr, 1)).xyz, screen_pos_curr, distance_curr, false);
		projection_view_to_screen((global_ubo.V_prev * vec4(ref_pos_prev, 1)).xyz, screen_pos_prev, distance_prev, true);

		vec3 motion;
		motion.xy = screen_pos_prev - screen_pos_curr;
		motion.z = distance_prev - distance_curr;

		// Use negative depth for reflections and refractions to prevent various filters from
		// filtering across reflection boundaries.
		motion.z = -motion.z;
		distance_curr = -distance_curr;

		imageStore(IMG_PT_VIEW_DEPTH_A, ipos, vec4(distance_curr));
		imageStore(IMG_PT_MOTION, ipos, vec4(motion, fwidth_depth));
	}
	else if(spec_bounce_index == 0)
	{
		imageStore(IMG_PT_VIEW_DEPTH_A, ipos, -imageLoad(IMG_PT_VIEW_DEPTH_A, ipos));
		
		vec4 motion = imageLoad(IMG_PT_MOTION, ipos);
		motion.z = -motion.z;
		imageStore(IMG_PT_MOTION, ipos, motion);
	}

	position = new_position;
	geo_normal = new_geo_normal;

	if(dot(direction, geo_normal) > 0)
		geo_normal = -geo_normal;

	float primary_metallic = 0;
	float primary_roughness = 1;
	vec3 primary_emissive = vec3(0);
	float primary_specular_factor = 1;

	get_material(
		triangle, 
		bary,
		tex_coord, 
		tex_coord_x, 
		tex_coord_y, 
		-1, 
		geo_normal, 
		primary_base_color, 
		normal, 
		primary_metallic, 
		primary_roughness, 
		primary_emissive,
		primary_specular_factor);

	primary_is_weapon = false;

	// will be used in case of transparency, to retain difference between TRANSPARENT and TRANSP_MODEL
	// default to TRANSP_MODEL so transparency on other material kind works (needed for eg gunalpha)
	uint transparency_kind = (material_id & MATERIAL_KIND_MASK) == MATERIAL_KIND_TRANSPARENT ? MATERIAL_KIND_TRANSPARENT : MATERIAL_KIND_TRANSP_MODEL;

	if((is_chrome(material_id) || is_screen(material_id) || is_camera(material_id)) && primary_roughness >= MAX_MIRROR_ROUGHNESS || is_transparent(material_id))
	{
		material_id = (material_id & ~MATERIAL_KIND_MASK) | MATERIAL_KIND_REGULAR;
	}

	if(is_water(material_id) || is_slime(material_id))
	{
		normal = get_water_normal(material_id, geo_normal, triangle.tangents[0], position, false);

		if(abs(geo_normal.z) < 0.1)  // hack to detect actual water vs. vertical force fields
			material_id = (material_id & ~MATERIAL_KIND_MASK) | MATERIAL_KIND_GLASS;
	}

	if(is_camera(material_id) && ((global_ubo.pt_cameras == 0) || (push_constants.bounce_index >= global_ubo.pt_reflect_refract - 1)))
	{
		material_id = (material_id & ~MATERIAL_KIND_MASK) | MATERIAL_KIND_SCREEN;
	}

	vec2 cameraUV = vec2(0);
	if(is_camera(material_id))
	{
		if(get_camera_uv(tex_coord, cameraUV))
		{
			bool do_split = bitCount(checkerboard_flags) == 1;

			if(do_split)
			{
				throughput *= 2;

				checkerboard_flags = CHECKERBOARD_FLAG_REFRACTION | CHECKERBOARD_FLAG_REFLECTION;

				if(is_odd_checkerboard)
				{
					material_id = (material_id & ~MATERIAL_KIND_MASK) | MATERIAL_KIND_SCREEN;
				}
			}

			primary_emissive = vec3(0);

		}
		else
		{
			material_id = (material_id & ~MATERIAL_KIND_MASK) | MATERIAL_KIND_REGULAR;
		}
	}

	if (triangle.alpha < 1.0)
	{
		// Translucent objects.
		if (bitCount(checkerboard_flags & CHECKERBOARD_FLAG_FIELD_MASK) == 1)
		{
			// Split the path if it wasn't split before.
			throughput *= 2;
			checkerboard_flags = CHECKERBOARD_FLAG_PRIMARY | CHECKERBOARD_FLAG_REFRACTION;

			if (!is_odd_checkerboard)
			{
				// This field stays on the surface.
				throughput *= triangle.alpha;
			}
			else
			{
				// This field goes through the surface.
				material_id = (material_id & ~MATERIAL_KIND_MASK) | transparency_kind;
				throughput *= 1.0 - triangle.alpha;
			}
		}
		else
		{
			// If the path was split *on the same model* before, continue tracing.
			// We don't want to show the internal geometry of a translucent model.
			uint primary_instance_index = imageLoad(IMG_PT_VISBUF_PRIM_A, ipos).x;
			if (primary_instance_index == triangle.instance_index)
			{
				material_id = (material_id & ~MATERIAL_KIND_MASK) | transparency_kind;
			}
		}
	}

	if(luminance(primary_emissive) > 0) {
    	// Emissive component on the reflected/refracted surface - blend it with zero alpha
		transparent = alpha_blend_premultiplied(transparent, vec4(primary_emissive * throughput, 0));
	}

	{
		uvec2 vis_buf;
		vis_buf.x = triangle.instance_index;
		vis_buf.y = triangle.instance_prim;
		imageStore(IMG_PT_VISBUF_PRIM_A, ipos, uvec4(vis_buf, 0, 0));
		imageStore(IMG_PT_VISBUF_BARY_A, ipos, vec4(bary.yz, 0, 0));
	}

	// Store the surface parameters into the G-buffer for the indirect lighting shader
	if(is_camera(material_id))
	{
		uint camera_id = (material_id & MATERIAL_LIGHT_STYLE_MASK) >> (MATERIAL_LIGHT_STYLE_SHIFT + 2);
		uint packed = uint(cameraUV.x * 0x3fff) & 0x3fff | ((uint(cameraUV.y * 0x3fff) & 0x3fff) << 14) | (camera_id << 28);
		imageStore(IMG_PT_NORMAL_A, ipos, uvec4(packed));
	}
	else
	{
		imageStore(IMG_PT_NORMAL_A, ipos, uvec4(encode_normal(normal)));
	}

	// Replace the material light style with medium
	material_id = (material_id & ~MATERIAL_LIGHT_STYLE_MASK) | (primary_medium << MATERIAL_LIGHT_STYLE_SHIFT) & MATERIAL_LIGHT_STYLE_MASK;

	imageStore(IMG_PT_GEO_NORMAL_A, ipos, uvec4(encode_normal(geo_normal)));
	imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(position.xyz, uintBitsToFloat(material_id)));
	imageStore(IMG_PT_VIEW_DIRECTION, ipos, vec4(direction, float(checkerboard_flags | checkerboard_weapon_flag)));
	imageStore(IMG_PT_THROUGHPUT, ipos, vec4(throughput, optical_path_length));
	imageStore(IMG_PT_TRANSPARENT, ipos, transparent);
	imageStore(IMG_PT_CLUSTER_A, ipos, uvec4(cluster_idx));
	imageStore(IMG_PT_BASE_COLOR_A, ipos, vec4(primary_base_color, primary_specular_factor));
	imageStore(IMG_PT_METALLIC_A, ipos, vec4(primary_metallic, primary_roughness, 0, 0));
}

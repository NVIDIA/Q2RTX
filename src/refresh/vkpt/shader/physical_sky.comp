/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "utils.glsl"

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 2
#define VERTEX_READONLY 1
#include "vertex_buffer.h"

#include "sky.h"

#include "precomputed_sky.glsl"

layout(push_constant, std140) uniform ShadowMapConstants {
    mat4 shadow_view_projection_matrix;
} push;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct SunInfo {
    vec3 direction;
    vec3 color;
    vec3 radiance;
    float intensity;
};

//
// Clouds
//

const float PI = 3.141592;

const float CLOUD_START = 2.0;	// A height over the Earth surface, where the cloud layer starts, in km
const float CLOUD_HEIGHT = 1.4;	// The cloud layer thickness, in km

const vec3 TERRAIN_CAMERA_POS = vec3(2.5f,-2.9f,1.95f);

/*
returns distance to sphere intersection, where:
	origin - intersecting ray origin point
	dir - intersecting ray direction, normalized
    spherePos - center of the sphere
    sphereRad - sphere radius
*/
float intersectSphere(vec3 origin, vec3 dir, vec3 spherePos, float sphereRad) 
{
    vec3 oc = origin - spherePos;
    float b = 2.0 * dot(dir, oc);
    float c = dot(oc, oc) - sphereRad*sphereRad;
    float disc = b * b - 4.0 * c;
    if (disc < 0.0)
        return -1.0;    
    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;
    float t0 = q;
    float t1 = c / q;
    if (t0 > t1) 
	{
        float temp = t0;
        t0 = t1;
        t1 = temp;
    }
    if (t1 < 0.0)
        return -1.0;
    return (t0 < 0.0) ? t1 : t0;
}


/*
Mie phase function
*/
float HenyeyGreenstein(float mu, float inG) {
    return (1.-inG * inG)/(pow(1.+inG*inG - 2.0 * inG*mu, 1.5)*4.0* PI);
}



#define CLOUDS_COARSE_COUNT 64
#define CLOUDS_FINE_COUNT 128
#define CLOUDS_SKY_SUN_COUNT 8
#define CLOUD_DENSITY_THRESHOLD 0.67

#define EXTINCTION_FACTOR 10.55
#define SCATTERING_FACTOR 100.0
#define FINE_RAY_LENGTH (CLOUD_HEIGHT / CLOUDS_FINE_COUNT)
#define SUN_RAY_LENGTH (CLOUD_HEIGHT / (CLOUDS_SKY_SUN_COUNT * 4))

/* Height over the planet surface*/
float GetW(vec3 p)
{
    float l = length(p);
    return clamp((p.z - 6360.1 - CLOUD_START) / CLOUD_HEIGHT,0,1);
}

/* 
    Combine 3D cloud texture layers to get the cloud density at the given point
*/
float GetDensity(vec3 step,float raylen, float current_ray)
{
    float w = current_ray / raylen;
    vec3 uvw1 = vec3(step.xy * 0.02, w);
    vec3 uvw2 = vec3(step.xy * 0.2, w);

    vec4 cloud1 = texture(TEX_SKY_CLOUDS, uvw1);
    vec4 cloud2 = texture(TEX_SKY_CLOUDS, uvw2);

    return cloud1.r + (cloud2.g - 0.5) * 0.1;
    //return cloud1.r;
}
/*
    Coarse raymarching function, ignores the transmittance in the sun direction
*/
vec3 CoarseRaymarching(vec3 camera, vec3 view_dir, float distToAtmStart, float distToAtmEnd, out float current_ray)
{
    vec3 step = camera + view_dir * distToAtmStart;
    float raylen = distToAtmEnd - distToAtmStart;
    float raypart = raylen / CLOUDS_COARSE_COUNT;
    vec3 delta = view_dir * raypart;
    
    current_ray = 0;
    float prev_density = 0;
    vec3 prev_step = step;
    for (int i=0; i<CLOUDS_COARSE_COUNT; i++)
    {
        float Density = GetDensity(step, raylen, current_ray);
        if (Density> CLOUD_DENSITY_THRESHOLD)
        {
            float lerp = (prev_density - CLOUD_DENSITY_THRESHOLD) / (Density - prev_density);
            return mix(step, prev_step, lerp);
        }
        current_ray += raypart;
        prev_step = step;
        step += delta;
        prev_density = Density;        
    }

    return vec3(0,0,0);
}

/*
    Calculates transmittance to the given direction from the given point
*/
float ComputeSunTransmittanceAtPos(vec3 camera, vec3 view_dir, float raylen, float current_ray, float raypart, int stepCount)
{
    vec3 step = camera;
    vec3 delta = view_dir * raypart;
    float cray = current_ray;
    float Transmittance = 1.0f;
    for (int i=0; i<stepCount; i++)
    {
        float Density = GetDensity(step, raylen, cray);
        Density = max(0, Density - CLOUD_DENSITY_THRESHOLD) / (1.0f - CLOUD_DENSITY_THRESHOLD);
        if (Density > 0.01)
        {
            Transmittance *= exp(-global_ubo.sky_transmittance * raypart * Density);
        }
        cray += raypart;
        step += delta;
        if (cray > raylen)
            break;
    }
    return clamp(Transmittance, 0, 1);
}

/*
    Raymarches from the camera point in the view_dir direction to the raylen distance
*/
vec4 FineRaymarching(vec3 camera, vec3 view_dir, float raylen, float current_ray, float raypart, int stepCount, out vec3 spoint)
{
    vec3 step = camera;
    float cray = current_ray;
    vec3 delta = view_dir * raypart;
    
    // Just getting the transmittance from the sun to the point
    vec3 sun_transmittance;
    vec3 radiance = GetSkyRadiance(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_SCATTERING, camera,  global_ubo.sun_direction_envmap, global_ubo.sun_direction_envmap, sun_transmittance);
    vec3 sun_direct_radiance = sun_transmittance;
    
    vec3 sky_irradiance = GetSkyIrradiance(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_IRRADIANCE, camera, vec3(0,0,0), global_ubo.sun_direction_envmap);
    
    float PhaseFunc = HenyeyGreenstein(dot(global_ubo.sun_direction_envmap, view_dir), global_ubo.sky_phase_g);
    float AmbientPhaseFunc = HenyeyGreenstein(dot(global_ubo.sun_direction_envmap, view_dir), global_ubo.sky_amb_phase_g);
    float Transmittance = 1.0f;
    vec3 Scattering = vec3(0);

    spoint = vec3(0,0,0);

    for (int i=0; i<stepCount; i++)
    {
        float Density = GetDensity(step, raylen, cray);
        
        Density = max(0, Density - CLOUD_DENSITY_THRESHOLD) / (1.0f - CLOUD_DENSITY_THRESHOLD);

        if (Density > 0.01)
        {
            if (spoint.x == 0 && spoint.y == 0 && spoint.z == 0)
            {
                spoint = step;
            }
            Transmittance *= exp(-global_ubo.sky_transmittance * raypart * Density);
            
            float SunTransmittance = ComputeSunTransmittanceAtPos(step, global_ubo.sun_direction_envmap, raylen, cray, SUN_RAY_LENGTH, CLOUDS_SKY_SUN_COUNT);

            vec3 S = global_ubo.sky_scattering * raypart * (PhaseFunc * sun_direct_radiance * SunTransmittance + AmbientPhaseFunc * sky_irradiance);
            Scattering += S * Transmittance;
        }
        
        cray += raypart;
        step += delta;
        if (cray > raylen)
            break;
    }

    return vec4(Scattering, Transmittance);
}

vec4 RaymarchClouds(vec3 camera, vec3 view_dir, float distToAtmStart, float distToAtmEnd, out vec3 spoint)
{
    float current_ray = 0;
    float raylen = distToAtmEnd - distToAtmStart;

    return FineRaymarching(camera + distToAtmStart * view_dir, view_dir, raylen, current_ray, raylen / CLOUDS_FINE_COUNT, CLOUDS_FINE_COUNT, spoint);
}

const int ArraySize5x5 = 25;
const vec2 Kernel5x5[ArraySize5x5] =
{
    { -2, 2 },
    { -1, 2 },
    { 0, 2 },
    { 1, 2 },
    { 2, 2 },
    { -2, 1 },
    { -1, 1 },
    { 0, 1 },
    { 1, 1 },
    { 2, 1 },
    { -2, 0 },
    { -1, 0 },
    { 0, 0 },
    { 1, 0 },
    { 2, 0 },
    { -2, -1 },
    { -1, -1 },
    { 0, -1 },
    { 1, -1 },
    { 2, -1 },
    { -2, -2 },
    { -1, -2 },
    { 0, -2 },
    { 1, -2 },
    { 2, -2 },
};

float SamplePCF(vec2 uv, float z)
{
    vec2 iPos = uv * 2048 - 0.5;
    vec2 fracPos = fract(iPos);

    // add an offset to make sure gather4 fetches the correct texels
    const vec2 snapOffset = 1.0f / (vec2(2048, 2048) * 512.0f);

    vec4 values = textureGather( TEX_TERRAIN_SHADOWMAP, uv - snapOffset, 0);

    vec4 references = z.xxxx;

    vec4 tested = step(references, values);

    return clamp(mix(
        mix(tested.w, tested.z, fracPos.x),
        mix(tested.x, tested.y, fracPos.x),
        fracPos.y
    ), 0.0f, 1.0f);
}

float IsPointInShadow(vec3 WorldPos)
{
    vec4 ClipPos =  push.shadow_view_projection_matrix * vec4(WorldPos, 1.0);
    ClipPos.xyz /= ClipPos.w;

    vec2 uv =  ClipPos.xy * vec2(0.5, -0.5) + vec2(0.5, 0.5);

    float Shadow = 0;
    for (int i = 0; i < ArraySize5x5; i++)
    {
        Shadow += SamplePCF(Kernel5x5[i] / 2048.0f + uv, ClipPos.z);
    }
    Shadow /= float(ArraySize5x5);

    return Shadow;
}


void main() {
 
    const int res = 1024,
              hres = res/2;

    vec4 out_color = vec4(0,0,0,1);

    ivec3 ipos = ivec3(gl_GlobalInvocationID);

    if(any(greaterThanEqual(ipos, ivec3(res, res, 6))))
        return;
    
    vec3 fpos = vec3(ipos.x-hres+0.5, ipos.y-hres+0.5, ipos.z);

    vec3 eyeVec;
         if (ipos.z==0) { eyeVec = vec3(  hres,  fpos.y, -fpos.x); out_color = vec4(1.0, 0.0, 0.0, 1); }
    else if (ipos.z==1) { eyeVec = vec3( -hres,  fpos.y,  fpos.x); out_color = vec4(0.2, 0.0, 0.0, 1); }
    else if (ipos.z==2) { eyeVec = vec3( fpos.x,  -hres,  fpos.y); out_color = vec4(0.0, 1.0, 0.0, 1); }
    else if (ipos.z==3) { eyeVec = vec3( fpos.x,   hres, -fpos.y); out_color = vec4(0.0, 0.2, 0.0, 1); }
    else if (ipos.z==4) { eyeVec = vec3( fpos.x, fpos.y,    hres); out_color = vec4(0.0, 0.0, 1.0, 1); }
    else if (ipos.z==5) { eyeVec = vec3(-fpos.x, fpos.y,   -hres); out_color = vec4(0.0, 0.0, 0.2, 1); }

    eyeVec = normalize(eyeVec);
    eyeVec = vec3(eyeVec.x, eyeVec.z, -eyeVec.y);

    SunInfo sun;
    sun.direction = normalize(global_ubo.sun_direction_envmap);
    sun.color     = global_ubo.sun_color;
    sun.intensity = 1.0f;
    
    // Data needed from terrain raymarcher
    vec4 TerrainAlbedo = vec4(0,0,0,0);
    vec3 TerrainWorldPos = vec3(0,0,0);
    vec3 TerrainNormal = vec3(0,0,0);
    float AO = 1.0f;
    float TerrainInShadow = 1.0f;
    float SkyGodrayShadowLength = 0;

    if (drawMountains()) 
	{
		 vec3 view = vec3(eyeVec.x, eyeVec.z, eyeVec.y);
		 TerrainAlbedo.xyz = texture( IMG_TERRAIN_ALBEDO, view).zyx;
         TerrainAlbedo.xyz = TerrainAlbedo.xyz * TerrainAlbedo.xyz;
		 float TerrainDepth = texture( IMG_TERRAIN_DEPTH, view).x;
         vec4 norm_data = texture( IMG_TERRAIN_NORMALS, view).zyxw;
		 TerrainNormal = normalize(norm_data.xyz  * vec3(2,-2,2) + vec3(-1,1,-1));
         AO = norm_data.w * norm_data.w * norm_data.w;
		 TerrainWorldPos = eyeVec * TerrainDepth;
            
         TerrainInShadow = IsPointInShadow(TerrainWorldPos + TERRAIN_CAMERA_POS);
    } else {
        TerrainNormal = vec3(0,1,0);
         TerrainAlbedo = vec4(global_ubo.physical_sky_ground_radiance, 1-smoothstep(-0.001, 0.001, eyeVec.z));
    }
    
    // sky

    bool is_direct_sunlight = false;
    
    const float TerrainSizeMultiplier = 0.0;
    if (TerrainWorldPos.x == 0 && TerrainWorldPos.y == 0 && TerrainWorldPos.z == 0)
    {
        vec3 camera = vec3(0,0,6360.1);
        vec3 sun_transmittance = vec3(0,0,0);

        vec3 radiance = GetSkyRadiance(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_SCATTERING, camera, eyeVec.xyz, sun.direction, sun_transmittance);
        vec3 sun_direct_radiance = sun_transmittance;

        sun_direct_radiance /= global_ubo.sun_solid_angle;
        sun_direct_radiance *= pow(clamp((dot(eyeVec, sun.direction) - global_ubo.sun_cos_half_angle) * 1000 + 0.875, 0, 1), 10);
        
        radiance += sun_direct_radiance;

        float CloudsVisible = dot(normalize(camera), eyeVec);
        if (CloudsVisible > -0.02 && drawClouds()) 
        {
            const float ATM_START = 6360.1+CLOUD_START;
            const float ATM_END = ATM_START+CLOUD_HEIGHT;

            float distToAtmStart = intersectSphere(camera, eyeVec, vec3(0.0, 0.0, 0.0), ATM_START);
            float distToAtmEnd = intersectSphere(camera, eyeVec, vec3(0.0, 0.0, 0.0), ATM_END);

            vec3 spoint = vec3(0);
            vec4 color = RaymarchClouds(camera, eyeVec, distToAtmStart, distToAtmEnd, spoint);
            
            vec3 ground_transmittance = vec3(0,0,0);
            vec3 radiance_to_point = GetSkyRadianceToPoint(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_SCATTERING, camera, spoint, sun.direction, ground_transmittance);
            color.xyz = color.xyz * ground_transmittance + radiance_to_point;

            radiance = mix(color.xyz,radiance, color.w);
        }

        radiance *= global_ubo.sun_color;

        if(luminance(sun_direct_radiance) > 0)
        {
            float pixel_solid_angle = 1.0 / float(hres * hres);
            vec2 frac_pos = fpos.xy / hres;
            pixel_solid_angle /= sqrt((1 + frac_pos.x * frac_pos.x) * (1 + frac_pos.y * frac_pos.y));

            atomicAdd(sun_color_buffer.accum_sun_color.r, int(radiance.r * pixel_solid_angle * SUN_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));
            atomicAdd(sun_color_buffer.accum_sun_color.g, int(radiance.g * pixel_solid_angle * SUN_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));
            atomicAdd(sun_color_buffer.accum_sun_color.b, int(radiance.b * pixel_solid_angle * SUN_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));

            is_direct_sunlight = true;
        }

        out_color = vec4(radiance, 1);
    }
    else
    {
        vec3 earth_offset = vec3(0, 0, 6360.0f) + TERRAIN_CAMERA_POS;
        vec3 camera = earth_offset;
        vec3 spoint = camera + TerrainWorldPos;
        vec3 sun_transmittance = vec3(0,0,0);

        // compute sun_transmittance
        GetSkyRadiance(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_SCATTERING, spoint, sun.direction, sun.direction, sun_transmittance);

        vec3 normal = vec3(0,0,0);
        vec3 sky_irradiance = GetSkyIrradiance(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_IRRADIANCE, spoint, normal, sun.direction);
        
        vec3 sun_direct_irradiance = sun_transmittance;

        vec3 ground_radiance = TerrainAlbedo.xyz * (max(0, dot(sun.direction, TerrainNormal)) * sun_direct_irradiance * TerrainInShadow + sky_irradiance * AO) / PI;
        
        vec3 ground_transmittance = vec3(0,0,0);
        vec3 radiance_to_point = GetSkyRadianceToPoint(SkyParams, TEX_SKY_TRANSMITTANCE, TEX_SKY_SCATTERING, camera, spoint, sun.direction, ground_transmittance);
        ground_radiance = ground_radiance * ground_transmittance + radiance_to_point * 0.5;

        ground_radiance *= global_ubo.sun_color;

        out_color = vec4(ground_radiance,1);
    }

    if(!is_direct_sunlight && (ipos.x & 31) == 15 && (ipos.y & 31) == 15)
    {
        atomicAdd(sun_color_buffer.accum_sky_color.r, int(out_color.r * SKY_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));
        atomicAdd(sun_color_buffer.accum_sky_color.g, int(out_color.g * SKY_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));
        atomicAdd(sun_color_buffer.accum_sky_color.b, int(out_color.b * SKY_COLOR_ACCUMULATOR_FIXED_POINT_SCALE));
        atomicAdd(sun_color_buffer.accum_sky_color.a, 1);
    }

    imageStore(IMG_PHYSICAL_SKY, ipos, out_color);
}

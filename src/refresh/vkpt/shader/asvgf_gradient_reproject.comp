/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader tries to match the surfaces from the current frame with the 
// previous frame. In every 3x3 square, a single matching pixel is selected.
// This pixel becomes a "gradient" sample for the lighting passes. Gradient
// samples are shaded using the previous frame's random number sequence and 
// important surface parameters like normal and roughness. The goal is to 
// compare the lighting environment for such pixels between the current and 
// previous frames.
//
// See `asvgf.glsl` for general information about denoisers in Q2RTX.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "utils.glsl"

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 2
#include "vertex_buffer.h"

#include "asvgf.glsl"

// optimal group size determined experimentally on a 3090
#define GROUP_SIZE_GRAD 8
#define GROUP_SIZE_PIXELS (GROUP_SIZE_GRAD*GRAD_DWN)

layout(local_size_x = GROUP_SIZE_PIXELS, local_size_y = GROUP_SIZE_PIXELS, local_size_z = 1) in;

// Using the visibility buffer, compute the new position of the surface that we found
// in the previous frame. Exact matching of gradient surface positions is important
// to avoid false positive gradients in the light penumbras, where a subpixel shift
// that normally happens between frames can make a difference between a light sample
// being visible or shadowed.
void patch_position(ivec2 ipos, ivec2 found_pos_prev)
{
	// Read the visibility buffer
	uvec2 vis_buf = texelFetch(TEX_PT_VISBUF_PRIM_B, found_pos_prev, 0).xy;

	int static_instance_idx = -1;
	uint buffer_idx;
	uint primitive_id;

	if (vis_buf.x == ~0u) // is a static primitive
	{
		primitive_id = vis_buf.y;
		buffer_idx = VERTEX_BUFFER_WORLD;
	}
	else
	{
		uint instance_id_prev = vis_buf.x;
		uint triangle_idx = vis_buf.y;

		// Map the dynamic objects geometry data from the previous frame into the current frame
		uint instance_id_curr = instance_buffer.model_prev_to_current[instance_id_prev];

		// the object no longer exists
		if(instance_id_curr == ~0u)
			return;

		ModelInstance mi = instance_buffer.model_instances[instance_id_curr];
		buffer_idx = mi.render_buffer_idx;
		primitive_id = mi.render_prim_offset + triangle_idx;

		// If it's a static (non-animated) mesh, the vertices need to be transformed
		if (mi.render_buffer_idx == mi.source_buffer_idx)
			static_instance_idx = int(instance_id_curr);
	}

	Triangle triangle = load_and_transform_triangle(static_instance_idx, buffer_idx, primitive_id);

	vec3 bary;
	bary.yz = texelFetch(TEX_PT_VISBUF_BARY_B, found_pos_prev, 0).xy;
	bary.x = clamp(1.0 - bary.y - bary.z, 0.0, 1.0);

	// Reconstruct the position based on the barycentrics
	vec3 position = triangle.positions * bary;

	float materialId = imageLoad(IMG_PT_SHADING_POSITION, ipos).w;
	imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(position, materialId));

	// For primary surfaces, i.e. not reflections or refractions,
	// reconstruct the true view direction based on the exact position.
	// The view direction is especially important for shiny materials
	// where an indirect specular ray can hit a different object given
	// a view direction with a subpixel offset.
	uint checkerboard_flags = int(imageLoad(IMG_PT_VIEW_DIRECTION, ipos).w);
	if ((checkerboard_flags & CHECKERBOARD_FLAG_FIELD_MASK) == CHECKERBOARD_FLAG_PRIMARY)
	{
		vec3 view_direction = normalize(position - global_ubo.cam_pos.xyz);
		imageStore(IMG_PT_VIEW_DIRECTION, ipos, vec4(view_direction, checkerboard_flags));
	}
}

shared vec4 s_reprojected_pixels[GROUP_SIZE_PIXELS][GROUP_SIZE_PIXELS];

// For a given pixel p, find its surface in the previous frame based on the motion vector.
// If such surface exists - based on depth and normal similarity - get the old diffuse
// and specular luminances that will be used to compute gradients later.
void reproject_pixel(ivec2 p, int field_left, int field_right)
{
	ivec2 local_pos = ivec2(gl_LocalInvocationID);

	// Initialize the shared memory unconditionally
	s_reprojected_pixels[local_pos.y][local_pos.x] = vec4(0);

	// Compute the previous frame position of this surface
	vec4 motion = texelFetch(TEX_PT_MOTION, p, 0);
	vec2 pos_prev = ((vec2(p) + vec2(0.5)) * vec2(global_ubo.inv_width * 2, global_ubo.inv_height) + motion.xy) * vec2(global_ubo.prev_width / 2, global_ubo.prev_height);
	ivec2 pp = ivec2(floor(pos_prev));

	if(pp.x < field_left || pp.x >= field_right || pp.y >= global_ubo.prev_height)
		return;

	// Fetch the previous frame gradient position...
	ivec2 pos_grad_prev = pp / GRAD_DWN;

	uint prev_grad_sample_pos = texelFetch(TEX_ASVGF_GRAD_SMPL_POS_B, pp / GRAD_DWN, 0).x;
	ivec2 stratum_prev = ivec2(
		prev_grad_sample_pos >> (STRATUM_OFFSET_SHIFT * 0),
		prev_grad_sample_pos >> (STRATUM_OFFSET_SHIFT * 1)) & STRATUM_OFFSET_MASK;

	// If this pixel was a gradient on the previous frame, don't use it. Two reasons:
	// 1) Carrying forward the same random number sequence over multiple frames introduces bias.
	// 2) Gradient pixels use light lists from the previous frame. If the same pixel was used
	// as a gradient for more than one frame, we would need to keep the light lists from 2+ frames behind.
	if(all(equal(pos_grad_prev * GRAD_DWN + stratum_prev, pp)))
		return;

	// Load the data for surface matching
	uint cluster_curr = texelFetch(TEX_PT_CLUSTER_A, p, 0).x;
	uint cluster_prev = texelFetch(TEX_PT_CLUSTER_B, pp, 0).x;
	float depth_curr = texelFetch(TEX_PT_VIEW_DEPTH_A, p, 0).x;
	float depth_prev = texelFetch(TEX_PT_VIEW_DEPTH_B, pp, 0).x;
	vec3 geo_normal_curr = decode_normal(texelFetch(TEX_PT_GEO_NORMAL_A, p, 0).x);
	vec3 geo_normal_prev = decode_normal(texelFetch(TEX_PT_GEO_NORMAL_B, pp, 0).x);

	float dist_depth = abs(depth_curr - depth_prev + motion.z) / abs(depth_curr);
	float dot_geo_normals = dot(geo_normal_curr, geo_normal_prev);

	// Compare the surfaces
	if(cluster_curr == cluster_prev && dist_depth < 0.1 && dot_geo_normals > 0.9)
	{
		vec3 prev_hf = unpackRGBE(texelFetch(TEX_PT_COLOR_HF, pp, 0).x);
		vec3 prev_spec = unpackRGBE(texelFetch(TEX_PT_COLOR_SPEC, pp, 0).x);
		vec2 prev_lum = vec2(luminance(prev_hf), luminance(prev_spec));

		// Store the results into shared memory: previous frame position and luminances
		s_reprojected_pixels[local_pos.y][local_pos.x] = vec4(pp, prev_lum);
	}
}

void
main()
{
	// First pass: the entire thread group is busy matching pixels with the previous frame

	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	ivec2 pos_grad = ipos / GRAD_DWN;

	int field_left = 0;
	int field_right = global_ubo.prev_width / 2;
	if (ipos.x >= global_ubo.width / 2)
	{
		field_left = field_right;
		field_right = global_ubo.prev_width;
	}

	reproject_pixel(ipos, field_left, field_right);

	barrier();

	// Second pass: the first (GROUP_SIZE_GRAD)^2 pixels are looking for the brightest
	// matching pixels in each 3x3 square.

	// Picking the brightest pixel helps prevent bright trails when the light has moved.
	// If we just pick a random pixel in the the penumbra of the sun light for example,
	// there is a high chance that this pixel will not receive any sun light due to random sampling of the sun. 
	// Overall, we'll miss the changing luminance of the moving penumbra, which is very well visible.

	ivec2 local_pos;
	local_pos.x = int(gl_LocalInvocationIndex) % GROUP_SIZE_GRAD;
	local_pos.y = int(gl_LocalInvocationIndex) / GROUP_SIZE_GRAD;

	if(local_pos.y >= GROUP_SIZE_GRAD)
		return;

	pos_grad = ivec2(gl_WorkGroupID) * GROUP_SIZE_GRAD + local_pos;
	ipos = pos_grad * GRAD_DWN;

	bool found = false;
	ivec2 found_offset = ivec2(0);
	ivec2 found_pos_prev = ivec2(0);
	vec2 found_prev_lum = vec2(0);

	for(int offy = 0; offy < GRAD_DWN; offy++)
	{
		for(int offx = 0; offx < GRAD_DWN; offx++)
		{
			ivec2 p = local_pos * GRAD_DWN + ivec2(offx, offy);

			vec4 reprojected_pixel = s_reprojected_pixels[p.y][p.x];

			vec2 prev_lum = reprojected_pixel.zw;

			// Use total luminance of diffuse and specular as the heuristic
			if(prev_lum.x + prev_lum.y > found_prev_lum.x + found_prev_lum.y)
			{
				found_prev_lum = prev_lum;
				found_offset = ivec2(offx, offy);
				found_pos_prev = ivec2(reprojected_pixel.xy);
				found = true;
			}
		}
	}

	if (!found)
	{
		imageStore(IMG_ASVGF_GRAD_SMPL_POS_A, pos_grad, uvec4(0));
		return;
	}

	// Final pass: store the gradient information and patch the surface parameters

	ipos += found_offset;

	uint gradient_idx =
		  (1 << 31) /* mark sample as busy */
		| (found_offset.x << (STRATUM_OFFSET_SHIFT * 0)) /* encode pos in */
		| (found_offset.y << (STRATUM_OFFSET_SHIFT * 1)); /* current frame */

	imageStore(IMG_ASVGF_GRAD_SMPL_POS_A, pos_grad, uvec4(gradient_idx));

	imageStore(IMG_ASVGF_GRAD_HF_SPEC_PING, pos_grad, vec4(found_prev_lum, 0, 0));

	imageStore(IMG_ASVGF_RNG_SEED_A, ipos, texelFetch(TEX_ASVGF_RNG_SEED_B, found_pos_prev, 0));
	imageStore(IMG_PT_NORMAL_A, ipos, texelFetch(TEX_PT_NORMAL_B, found_pos_prev, 0));
	imageStore(IMG_PT_BASE_COLOR_A, ipos, texelFetch(TEX_PT_BASE_COLOR_B, found_pos_prev, 0));
	imageStore(IMG_PT_METALLIC_A, ipos, texelFetch(TEX_PT_METALLIC_B, found_pos_prev, 0));

	patch_position(ipos, found_pos_prev);
}

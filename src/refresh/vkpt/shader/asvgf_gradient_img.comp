/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader computes the difference in lighting between the current and the 
// previous frames. Gradient samples constructed by the `asvgf_fwd_project` 
// shader guide this process.
//
// See `asvgf.glsl` for general information about denoisers in Q2RTX.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "global_textures.h"

#include "utils.glsl"
#include "asvgf.glsl"

// Gradient for HF and SPEC channels is computed as the relative difference between
// path tracer outputs on the current and previous frame, for a given gradient pixel. 
float get_gradient(float l_curr, float l_prev)
{
	float l_max = max(l_curr, l_prev);

	if(l_max == 0)
		return 0;

	float ret = abs(l_curr - l_prev) / l_max;
	ret *= ret; // make small changes less significant
	
	return ret;
}

// Gradient for the LF channel is computed as the relative difference in average brightness
// of all pixels in a very large screen region. Also, instead of the raw path tracer output
// from the previous frame, the temporally accumulated LF color is used to continuously 
// detect invalid history and not miss some sudden flashes.
// The approach that's used for HF doesn't work here because the LF signal is very sparse,
// so the chance of a gradient pixel getting a different value is very low - because in many cases,
// both the current and the previous pixels will be black.
vec2 get_lf_gradient(ivec2 ipos)
{
	// Find the same surface on the pvreious frame
	vec4 motion = texelFetch(TEX_PT_MOTION, ipos, 0);

    ivec2 pos_prev = ivec2(((vec2(ipos) + vec2(0.5)) * vec2(global_ubo.inv_width * 2, global_ubo.inv_height) + motion.xy) * vec2(global_ubo.prev_width * 0.5, global_ubo.prev_height));

	// Boundaries for the checkerboard field, either left or right half of the screen
	int field_left = 0;
	int field_right = global_ubo.prev_width / 2;
	if(ipos.x >= global_ubo.width / 2)
	{
		field_left = field_right;
		field_right = global_ubo.prev_width;
	}

	// Ignore if the surface was outside of the screen
	if(pos_prev.x < field_left || pos_prev.x >= field_right || pos_prev.y < 0 || pos_prev.y >= global_ubo.height)
		return vec2(0, 0);

	// Get the current path tracer output and the temporally accumulated history.
	// Ignore disocclusion, doesn't seem to be necessary here as there is a huge blur pass
	// done on the LF gradient samples after.
	float lum_curr = texelFetch(TEX_PT_COLOR_LF_SH, ipos, 0).w;
	float lum_prev = texelFetch(TEX_ASVGF_HIST_COLOR_LF_SH_B, pos_prev, 0).w;

	// Return raw colors, do not divide until after the blur pass. We want to detect 
	// brightness changes over large parts of the screen to avoid noise.
	return vec2(lum_curr, lum_prev);
}

void
main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, ivec2(global_ubo.current_gpu_slice_width, global_ubo.height) / GRAD_DWN)))
		return;

	uint u = texelFetch(TEX_ASVGF_GRAD_SMPL_POS_A, ipos, 0).r;

	vec2 grad_lf = vec2(0);
	float grad_hf = 0;
	float grad_spec = 0;

	// Process reprojected HF and SPEC samples
	if(u != 0u)
	{
		/* position of sample inside of stratum in the current frame */
		ivec2 grad_strata_pos = ivec2(
				u >> (STRATUM_OFFSET_SHIFT * 0),
				u >> (STRATUM_OFFSET_SHIFT * 1)) & STRATUM_OFFSET_MASK;

		/* full position in current frame for gradient sample */
		ivec2 grad_sample_pos_curr = ipos * GRAD_DWN + grad_strata_pos;

		vec2 prev_hf_spec_lum = imageLoad(IMG_ASVGF_GRAD_HF_SPEC_PING, ipos).rg;

		vec3 curr_hf = unpackRGBE(texelFetch(TEX_PT_COLOR_HF, grad_sample_pos_curr, 0).x);
		vec3 curr_spec = unpackRGBE(texelFetch(TEX_PT_COLOR_SPEC, grad_sample_pos_curr, 0).x);

		grad_hf = get_gradient(luminance(curr_hf), prev_hf_spec_lum.x);
		grad_spec = get_gradient(luminance(curr_spec), prev_hf_spec_lum.y);

		// First person weapon moves a lot, which creates gradients and makes noise.
		// Slow-changing lighting is better than noise on the weapon, so reduce the gradients.
		int checkerboard_flags = int(texelFetch(TEX_PT_VIEW_DIRECTION, grad_sample_pos_curr, 0).w);
		bool primary_is_weapon = (checkerboard_flags & CHECKERBOARD_FLAG_WEAPON) != 0;
		if(primary_is_weapon)
		{
			grad_spec *= global_ubo.flt_grad_weapon;
		}
	}

	// Process all LF samples in the 3x3 square, accumulate the luminances
	for(int yy = 0; yy < GRAD_DWN; yy++)
	{
		for(int xx = 0; xx < GRAD_DWN; xx++)
		{
			grad_lf += get_lf_gradient(ipos * GRAD_DWN + ivec2(xx, yy));
		}
	}

	imageStore(IMG_ASVGF_GRAD_LF_PING, ipos, vec4(grad_lf, 0, 0));
	imageStore(IMG_ASVGF_GRAD_HF_SPEC_PING, ipos, vec4(grad_hf, grad_spec, 0, 0));
}

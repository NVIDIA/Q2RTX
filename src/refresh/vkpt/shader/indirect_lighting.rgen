/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This rgen shader computes a single bounce of lighting for the surface
// stored in the G-buffer, and optionally writes the next surface into the 
// G-buffer for the next bounce stage.
//
// See `path_tracer.h` for an overview of the path tracer.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#pragma optionNV(unroll all)

#include "path_tracer_rgen.h"
#include "path_tracer_transparency.glsl"

layout(constant_id = 0) const uint spec_bounce_index = 0;

void
indirect_lighting(
	ivec2 ipos, 
	bool half_res, 
	out vec3 bounce_direction,
	out vec3 bounce_contrib,
	out bool is_specular_ray)
{
    rng_seed = texelFetch(TEX_ASVGF_RNG_SEED_A, ipos, 0).r;
	
	uint cluster_idx = ~0u;

	vec4 position_material = texelFetch(TEX_PT_SHADING_POSITION, ipos, 0);
	
	vec3 position   = position_material.xyz;
	uint material_id = floatBitsToUint(position_material.w);

	// don't compute lighting for invalid surfaces;
	// don't compute lighting for lava because it's emissive and self-illuminating, which causes issues with the filters
	if(material_id == 0 || is_lava(material_id))
	{
		bounce_direction = vec3(0);
		bounce_contrib = vec3(0);
		is_specular_ray = false;
		return;
	}

	vec4 throughput = texelFetch(TEX_PT_BOUNCE_THROUGHPUT, ipos, 0).rgba;
	vec4 view_direction;
	vec3 normal;
    vec3 geo_normal;
    vec4 primary_base_color = vec4(0);
    float primary_metallic = 0;
	float primary_roughness = 1;
	float primary_specular_factor = 0;
	
	if(half_res)
		throughput.rgb *= 2;

	if(spec_bounce_index == 0)
	{
		// First bounce: use primary/reflected view direction,
		// actual normals of the surface, and specular parameters
		// (unless GI is set to "low", which means half res and no specular)

	    view_direction = texelFetch(TEX_PT_VIEW_DIRECTION, ipos, 0);
		normal = decode_normal(texelFetch(TEX_PT_NORMAL_A, ipos, 0).x);
	    geo_normal = decode_normal(texelFetch(TEX_PT_GEO_NORMAL_A, ipos, 0).x);
	    primary_base_color = texelFetch(TEX_PT_BASE_COLOR_A, ipos, 0);
	    primary_specular_factor = primary_base_color.a;

	    if(!half_res)
	    {
		    vec2 metal_rough = texelFetch(TEX_PT_METALLIC_A, ipos, 0).xy;
		    primary_metallic = metal_rough.x;
			primary_roughness = metal_rough.y;
		}
	}
	else
	{
		// Second bounce: use the first bounce view direction,
		// and the geo normal of the first bounce surface.
		// These have to be stored in textures different from the primary
		// surface params, because the primary view direction and normal
		// are used for fake specular reconstruction (see `asvgf_atrous.comp`)
		// and for LF channel filtering, respectively.

	    view_direction = texelFetch(TEX_PT_VIEW_DIRECTION2, ipos, 0);
	    geo_normal = decode_normal(texelFetch(TEX_PT_GEO_NORMAL2, ipos, 0).x);
		normal = geo_normal;
	}

    vec3 primary_albedo, primary_base_reflectivity;
    get_reflectivity(primary_base_color.rgb, primary_metallic, primary_albedo, primary_base_reflectivity);

	bool primary_is_weapon = (material_id & MATERIAL_FLAG_WEAPON) != 0;

	float direct_specular_weight = smoothstep(
		global_ubo.pt_direct_roughness_threshold - 0.02, 
		global_ubo.pt_direct_roughness_threshold + 0.02, 
		primary_roughness);

	float fake_specular_weight = smoothstep(
		global_ubo.pt_fake_roughness_threshold, 
		global_ubo.pt_fake_roughness_threshold + 0.1, 
		primary_roughness);

    float NoV = max(0, -dot(normal, view_direction.xyz));

	bool first_bounce_is_specular = throughput.a != 0;

	vec3 bounce_throughput = throughput.rgb;

	is_specular_ray = false;
	{ 
		vec2 rng3 = vec2(get_rng(RNG_BRDF_X(spec_bounce_index+1)), get_rng(RNG_BRDF_Y(spec_bounce_index+1)));

		float rng_frensel = get_rng(RNG_BRDF_FRESNEL(spec_bounce_index+1));

		float specular_pdf = 0;

#if BOUNCE_SPECULAR
		if(spec_bounce_index == 0)
		{
			specular_pdf = (primary_metallic == 1 && fake_specular_weight == 0) ? 1.0 : 0.5;

			if(rng_frensel < specular_pdf) 
			{
				mat3 basis = construct_ONB_frisvad(normal);

				// Sampling of normal distribution function to compute the reflected ray.
				// See the paper "Sampling the GGX Distribution of Visible Normals" by E. Heitz, 
				// Journal of Computer Graphics Techniques Vol. 7, No. 4, 2018.
				// http://jcgt.org/published/0007/04/01/paper.pdf 

				vec3 N = normal;
				vec3 V = view_direction.xyz;
				vec3 H = ImportanceSampleGGX_VNDF(rng3, primary_roughness, V, basis);
				vec3 L = reflect(V, H);

				float NoL = max(0, dot(N, L));
				float NoH = max(0, dot(N, H));
				float VoH = max(0, -dot(V, H));

				if (NoL > 0 && NoV > 0)
				{
					// See the Heitz paper referenced above for the estimator explanation.
					//   (BRDF / PDF) = F * G2(V, L) / G1(V)
					// Assume G2 = G1(V) * G1(L) here and simplify that expression to just G1(L).
					
					float G1_NoL = G1_Smith(primary_roughness, NoL);
					vec3 F = schlick_fresnel(primary_base_reflectivity, VoH, primary_specular_factor);

					bounce_throughput *= G1_NoL * F;

					bounce_throughput *= 1 / specular_pdf;
					is_specular_ray = true;
					bounce_direction = normalize(L);
				}
			}
		}
#endif

		if(!is_specular_ray)
		{
			vec3 basis_normal, dir_sphere;
		#if ENABLE_SH
			if(spec_bounce_index == 0 && global_ubo.flt_enable != 0)
			{
				dir_sphere = sample_cos_hemisphere_multi(0, 1, rng3, HEMISPHERE_UNIFORMISH);
				basis_normal = geo_normal;
			}
			else
		#endif
			{
				dir_sphere = sample_cos_hemisphere(rng3);
				basis_normal = normal;
			}

			mat3 basis = construct_ONB_frisvad(basis_normal);
			bounce_direction = normalize(basis * dir_sphere);
			bounce_throughput *= 1 / (1 - specular_pdf);

			vec3 L = bounce_direction.xyz;
			vec3 V = -view_direction.xyz;
			vec3 H = normalize(V + L);
			float VoH = max(0, dot(V, H));

			vec3 F = schlick_fresnel(primary_base_reflectivity, VoH, primary_specular_factor);

			bounce_throughput *= vec3(1.0) - F;
		}
	}

	Ray bounce_ray;
	bounce_ray.origin = position;
	bounce_ray.direction = bounce_direction;
	bounce_ray.t_min = 0;
	bounce_ray.t_max = 10000;

	bounce_ray.origin -= view_direction.xyz * 0.01;

	int bounce_cull_mask = BOUNCE_RAY_CULL_MASK;
	int shadow_cull_mask = SHADOW_RAY_CULL_MASK;

	if(global_ubo.first_person_model != 0 && !primary_is_weapon)
	{
		bounce_cull_mask |= AS_FLAG_VIEWER_MODELS;
		shadow_cull_mask |= AS_FLAG_VIEWER_MODELS;
	}
	else
	{
		bounce_cull_mask |= AS_FLAG_VIEWER_WEAPON;
		shadow_cull_mask |= AS_FLAG_VIEWER_WEAPON;
	}

	trace_geometry_ray(bounce_ray, true, bounce_cull_mask);

	bounce_contrib = vec3(0);

	if(is_specular_ray)
	{
		if (found_intersection(ray_payload_geometry))
			bounce_ray.t_max = ray_payload_geometry.hit_distance;

		vec4 transparency = trace_effects_ray(bounce_ray, /* skip_procedural = */ true);
		bounce_contrib += transparency.rgb * transparency.a * bounce_throughput * (1.0 - direct_specular_weight);
	}

	Triangle triangle;

	bool bounce_is_sky_light = false;

	if(!found_intersection(ray_payload_geometry)) 
	{
		if(spec_bounce_index < global_ubo.pt_num_bounce_rays - 1)
		{
			imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(0));
		}
		return;
	}

	triangle = get_hit_triangle(ray_payload_geometry);

	float indirect_specular_weight = 1;
	if(is_specular_ray)
	{
		float cone_size = ray_payload_geometry.hit_distance * primary_roughness;
		indirect_specular_weight = 1 - fake_specular_weight;
		indirect_specular_weight /= max(1, cone_size * global_ubo.pt_specular_anti_flicker * 0.01);
	}

	if(is_sky(triangle.material_id))
	{
		// On the first bounce, analytic lights are processed in the direct lighting pass, so 
		// check if `pt_direct_polygon_lights` is non-negative:
		//   0 means disable the polygon lights contribution;
		//   1 means sample the polygon lights analytically;
		//   -1 means replace the polygon lights with bounce ray sampling.
		// On the second bounce, analytic lights are processed in the first bounce pass,
		// guided by the same rules for the `pt_indirect_polygon_lights` setting.

		bool is_analytic_light = (triangle.material_id & MATERIAL_FLAG_LIGHT) != 0 && 
			((spec_bounce_index == 0) && (global_ubo.pt_direct_polygon_lights >= 0)	|| 
			 (spec_bounce_index == 1) && (global_ubo.pt_indirect_polygon_lights >= 0));

		if(!is_analytic_light || is_specular_ray)
		{
			vec3 env = env_map(bounce_direction, true);

			env *= global_ubo.pt_env_scale;
			
			if(!is_analytic_light)
				bounce_contrib = bounce_throughput * env * indirect_specular_weight;
			else if(is_specular_ray)
			{
				// MIS with direct specular
				if (global_ubo.pt_specular_mis != 0)
				{
					mat3 projected_positions = project_triangle(triangle.positions, position);

					vec3 bary = get_hit_barycentric(ray_payload_geometry);
					vec3 pos_on_triangle = triangle.positions * bary;
					pos_on_triangle -= position;
					pos_on_triangle = normalize(pos_on_triangle);

					float pdfw = get_triangle_pdfw(projected_positions, pos_on_triangle);

					direct_specular_weight *= get_specular_sampled_lighting_weight(primary_roughness,
						normal, -view_direction.xyz, bounce_direction, pdfw);
				}

				bounce_contrib = bounce_throughput * env * indirect_specular_weight * (1.0 - direct_specular_weight);
			}
		}

		if(spec_bounce_index < global_ubo.pt_num_bounce_rays - 1)
		{
			imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(0));
		}
	}
	else
	{
		vec3 bary         = get_hit_barycentric(ray_payload_geometry);
		vec2 tex_coord    = triangle.tex_coords * bary;
		uint bounce_material_id = triangle.material_id;

		if((bounce_material_id & MATERIAL_FLAG_WARP) != 0)
		{
			tex_coord = lava_uv_warp(tex_coord, global_ubo.time);
		}

		MaterialInfo bounce_minfo = get_material_info(triangle.material_id);

		// world-space
		vec3 bounce_position = triangle.positions * bary;
		vec3 bounce_geo_normal = normalize(triangle.normals * bary);
			
		vec3 bounce_flat_normal = normalize(cross(
			triangle.positions[1] - triangle.positions[0],
			triangle.positions[2] - triangle.positions[1]));
		
		if (dot(bounce_flat_normal, bounce_direction) > 0)
			bounce_geo_normal = -bounce_geo_normal;
		
		vec3 bounce_normal  = bounce_geo_normal;
		vec3 bounce_base_color = vec3(bounce_minfo.base_factor);
		if (bounce_minfo.base_texture != 0)
			bounce_base_color *= global_textureLod(bounce_minfo.base_texture, tex_coord, 2).rgb;
		bounce_base_color = clamp(bounce_base_color, vec3(0), vec3(1));
		uint bounce_cluster_idx    = triangle.cluster;


		vec3 emissive = sample_emissive_texture(triangle.material_id, bounce_minfo, tex_coord, vec2(0), vec2(0), is_specular_ray ? 2 : 3);

    	emissive += get_emissive_shell(triangle.material_id) * bounce_base_color;

		if(luminance(emissive) > 0) 
		{        
			emissive *= bounce_throughput;

			// spotlight term that matches the sample_light_lists() function in light_lists.h
			float spotlight = sqrt(max(0, -dot(bounce_direction, bounce_normal)));
			emissive *= spotlight;

			// See the comment for `is_analytic_light` above under `if(is_sky(triangle.material_id))`
			// Same logic applies.

			bool is_analytic_light = (bounce_material_id & MATERIAL_FLAG_LIGHT) != 0 && 
				((spec_bounce_index == 0) && (global_ubo.pt_direct_polygon_lights >= 0)	|| 
				 (spec_bounce_index == 1) && (global_ubo.pt_indirect_polygon_lights >= 0));

			if(is_specular_ray)
			{
				if(is_analytic_light)
					bounce_contrib += emissive * (1.0 - direct_specular_weight);
				else
					bounce_contrib += emissive * indirect_specular_weight;
			}
			else 
			{
				if(!is_analytic_light)
					bounce_contrib += emissive;
			}
		}

		if(dot(bounce_direction, bounce_normal) > 0)
			bounce_normal = -bounce_normal;

		bounce_throughput *= bounce_base_color;
		bounce_throughput *= indirect_specular_weight;

		float sun_bounce_range = global_ubo.pt_sun_bounce_range;
		if(is_specular_ray)
			sun_bounce_range *= (1 - sqrt(primary_roughness));
		
		float sun_attenuation = square(clamp(1.0 - square(square(ray_payload_geometry.hit_distance / sun_bounce_range)), 0, 1));

		if(spec_bounce_index == 0)
		{
			bool is_gradient = get_is_gradient(ipos);

			vec3 bounce_diffuse, bounce_specular;
			get_direct_illumination(
				bounce_position, 
				bounce_geo_normal, 
				bounce_geo_normal, 
				bounce_cluster_idx, 
				bounce_material_id, 
				shadow_cull_mask, 
				bounce_direction, 
				bounce_base_color,
				vec3(0), // base_reflectivity
				0.0, // specular_factor
				1.0, // roughness
				MEDIUM_NONE, 
				false, // enable_caustics
				0.0, // direct_specular_weight
		    	global_ubo.pt_indirect_polygon_lights > 0,
		    	global_ubo.pt_indirect_sphere_lights > 0,
		    	is_gradient,
		    	1, // bounce
		    	bounce_diffuse,
				bounce_specular);

			bounce_contrib += bounce_throughput * bounce_diffuse;
		}
		
		if(sun_attenuation > 0)
		{
			vec3 bounce_sun_diffuse, bounce_sun_specular;
			get_sunlight(
				bounce_cluster_idx,
				bounce_material_id,
				bounce_position,
				bounce_normal,
				bounce_geo_normal,
				bounce_direction,
				vec3(0), // base_reflectivity
				0.0, // specular_factor
				1.0, // roughness
				MEDIUM_NONE,
				false, // enable_caustics
				bounce_sun_diffuse,
				bounce_sun_specular,
				shadow_cull_mask);
			bounce_contrib += bounce_throughput * bounce_sun_diffuse * global_ubo.sun_bounce_scale * sun_attenuation;
		}

		if(spec_bounce_index < global_ubo.pt_num_bounce_rays - 1)
		{
			// store surface parameters for the next bounce
			imageStore(IMG_PT_GEO_NORMAL2, ipos, uvec4(encode_normal(bounce_geo_normal)));
			imageStore(IMG_PT_SHADING_POSITION, ipos, vec4(bounce_position.xyz, uintBitsToFloat(triangle.material_id)));
			imageStore(IMG_PT_VIEW_DIRECTION2, ipos, vec4(bounce_direction, 0));
			imageStore(IMG_PT_BOUNCE_THROUGHPUT, ipos, vec4(bounce_throughput, is_specular_ray ? 1 : 0));
		}
	}

	if (is_specular_ray)
		bounce_contrib = demodulate_specular(primary_base_reflectivity, bounce_contrib);

	if(spec_bounce_index > 0 && first_bounce_is_specular)
		is_specular_ray = true;

	if(spec_bounce_index > 0)
		bounce_direction = view_direction.xyz;
}

void
main() 
{
	ivec2 ipos = ivec2(rt_LaunchID.xy);
	if(rt_LaunchID.z != 0)
		ipos.x += global_ubo.width / 2;

	// Half-resolution tracing happens in the "low" GI setting
	bool half_res = global_ubo.pt_num_bounce_rays == 0.5;

	if(half_res)
	{
		// Tracing threads are launched in a dense grid whose vertical
		// size is only half of the frame, so rename the threads.
		// This is more efficient than launching an entire frame of 
		// threads and then doing nothing in every other row.
		ipos.y = ipos.y * 2 + (global_ubo.current_frame_idx & 1);
	}

	vec3 bounce_direction;
	vec3 bounce_contrib;
	bool is_specular_ray;

	indirect_lighting(ipos, half_res, bounce_direction, bounce_contrib, is_specular_ray);

	if(any(isinf(bounce_contrib)) || any(isnan(bounce_contrib)) || any(isinf(bounce_direction)) || any(isnan(bounce_direction)) )
		return;

	bounce_contrib = clamp_output(bounce_contrib);

	if(all(equal(bounce_contrib, vec3(0))))
		return;

	if(is_specular_ray)
	{
		bounce_contrib *= STORAGE_SCALE_SPEC;

		vec3 specular = unpackRGBE(imageLoad(IMG_PT_COLOR_SPEC, ipos).x);
		specular += bounce_contrib;
		imageStore(IMG_PT_COLOR_SPEC, ipos, uvec4(packRGBE(specular)));
	}
	else
	{
		bounce_contrib *= STORAGE_SCALE_LF;

		SH low_freq = load_SH(TEX_PT_COLOR_LF_SH, TEX_PT_COLOR_LF_COCG, ipos);

	#if ENABLE_SH
		if(global_ubo.flt_enable == 0)
			low_freq.shY.xyz += bounce_contrib;
		else
		{
			accumulate_SH(low_freq, irradiance_to_SH(bounce_contrib, bounce_direction), 1.0);
		}
	#else
		low_freq.shY.xyz += bounce_contrib;
	#endif

		STORE_SH(IMG_PT_COLOR_LF_SH, IMG_PT_COLOR_LF_COCG, ipos, low_freq);
	}
}

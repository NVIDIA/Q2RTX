/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader takes the entity models for the current frame and applies
// transforms to their original frames, producing triangles for these models
// in their final world positions. Also applies texture animations.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "utils.glsl"

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 1
#include "vertex_buffer.h"

#include "read_visbuf.glsl"

layout(set = 2,	binding = 0) readonly buffer MODEL_VBO {
	uint data[];
} model_vbos[];

uint get_model_uint(uint model_id, uint offset)
{
	return model_vbos[nonuniformEXT(model_id)].data[offset];
}

vec2 get_model_float2(uint model_id, uint offset)
{
	vec2 result;
	result.x = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 0]);
	result.y = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 1]);
	return result;
}

vec3 get_model_float3(uint model_id, uint offset)
{
	vec3 result;
	result.x = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 0]);
	result.y = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 1]);
	result.z = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 2]);
	return result;
}

vec4 get_model_float4(uint model_id, uint offset)
{
	vec4 result;
	result.x = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 0]);
	result.y = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 1]);
	result.z = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 2]);
	result.w = uintBitsToFloat(model_vbos[nonuniformEXT(model_id)].data[offset + 3]);
	return result;
}

Triangle
get_model_triangle(uint model_id, uint prim_id, uint idx_offset, uint vert_offset)
{
	uint idx_base = idx_offset + prim_id * 3;

	uvec3 idx;
	idx.x = model_vbos[nonuniformEXT(model_id)].data[idx_base + 0];
	idx.y = model_vbos[nonuniformEXT(model_id)].data[idx_base + 1];
	idx.z = model_vbos[nonuniformEXT(model_id)].data[idx_base + 2];

	idx = idx * MODEL_VERTEX_SIZE + vert_offset;

	Triangle t;
	t.positions[0] = get_model_float3(model_id, idx[0] + MODEL_VERTEX_POSITION);
	t.positions[1] = get_model_float3(model_id, idx[1] + MODEL_VERTEX_POSITION);
	t.positions[2] = get_model_float3(model_id, idx[2] + MODEL_VERTEX_POSITION);

	t.normals[0] = get_model_float3(model_id, idx[0] + MODEL_VERTEX_NORMAL);
	t.normals[1] = get_model_float3(model_id, idx[1] + MODEL_VERTEX_NORMAL);
	t.normals[2] = get_model_float3(model_id, idx[2] + MODEL_VERTEX_NORMAL);

	t.tex_coords[0] = get_model_float2(model_id, idx[0] + MODEL_VERTEX_TEXCOORD);
	t.tex_coords[1] = get_model_float2(model_id, idx[1] + MODEL_VERTEX_TEXCOORD);
	t.tex_coords[2] = get_model_float2(model_id, idx[2] + MODEL_VERTEX_TEXCOORD);

	t.tangents[0] = vec3(0); // computed later
	t.tangents[1] = vec3(0);
	t.tangents[2] = vec3(0);

	t.material_id = 0; // needs to come from uniform buffer
	t.cluster = ~0u;
	t.instance = 0;
	t.emissive_factor = 1;
	t.texel_density = 0;

	return t;
}

vec3 compute_tangent(mat3x3 positions, mat3x2 tex_coords, mat3x3 normals, out bool handedness)
{
	vec3 dp0 = positions[1] - positions[0];
	vec3 dp1 = positions[2] - positions[0];
	vec2 dt0 = tex_coords[1] - tex_coords[0];
	vec2 dt1 = tex_coords[2] - tex_coords[0];

	float r = 1.f / (dt0.x * dt1.y - dt1.x * dt0.y);

	vec3 sdir = r * vec3(
		dt1.y * dp0.x - dt0.y * dp1.x,
		dt1.y * dp0.y - dt0.y * dp1.y,
		dt1.y * dp0.z - dt0.y * dp1.z);

	vec3 tdir = r * vec3(
		dt0.x * dp1.x - dt1.x * dp0.x,
		dt0.x * dp1.y - dt1.x * dp0.y,
		dt0.x * dp1.z - dt1.x * dp0.z);

	vec3 normal = (normals[0] + normals[1] + normals[2]) / 3.0;

	vec3 tangent = normalize(sdir - normal * dot(normal, sdir));

	handedness = dot(cross(normal, tangent), tdir) < 0.0;

	return tangent;
}

Triangle
get_iqm_triangle(uint model_id, uint prim_id, uint idx_offset, uint vert_offset, uint matrix_offset)
{
	uint idx_base = idx_offset + prim_id * 3;

	uvec3 idx;
	idx.x = model_vbos[nonuniformEXT(model_id)].data[idx_base + 0];
	idx.y = model_vbos[nonuniformEXT(model_id)].data[idx_base + 1];
	idx.z = model_vbos[nonuniformEXT(model_id)].data[idx_base + 2];

	idx = idx * IQM_VERTEX_SIZE + vert_offset;

	Triangle t;
	t.positions[0] = get_model_float3(model_id, idx[0] + IQM_VERTEX_POSITION);
	t.positions[1] = get_model_float3(model_id, idx[1] + IQM_VERTEX_POSITION);
	t.positions[2] = get_model_float3(model_id, idx[2] + IQM_VERTEX_POSITION);

	t.normals[0] = get_model_float3(model_id, idx[0] + IQM_VERTEX_NORMAL);
	t.normals[1] = get_model_float3(model_id, idx[1] + IQM_VERTEX_NORMAL);
	t.normals[2] = get_model_float3(model_id, idx[2] + IQM_VERTEX_NORMAL);

	t.tex_coords[0] = get_model_float2(model_id, idx[0] + IQM_VERTEX_TEXCOORD);
	t.tex_coords[1] = get_model_float2(model_id, idx[1] + IQM_VERTEX_TEXCOORD);
	t.tex_coords[2] = get_model_float2(model_id, idx[2] + IQM_VERTEX_TEXCOORD);

	t.tangents[0] = get_model_float3(model_id, idx[0] + IQM_VERTEX_TANGENT);
	t.tangents[1] = get_model_float3(model_id, idx[1] + IQM_VERTEX_TANGENT);
	t.tangents[2] = get_model_float3(model_id, idx[2] + IQM_VERTEX_TANGENT);

	if (dot(t.tangents[0], t.tangents[0]) == 0) // maybe tangents are missing?
	{
		bool handedness = false;
		t.tangents[0].xyz = compute_tangent(t.positions, t.tex_coords, t.normals, handedness);
		t.tangents[1].xyz = t.tangents[0].xyz;
		t.tangents[2].xyz = t.tangents[0].xyz;
	}

	if (matrix_offset >= 0)
	{
		for (int i_vtx = 0; i_vtx < 3; i_vtx++)
		{
			mat3x4 transform = mat3x4(0);
			uint bone_indices = get_model_uint(model_id, idx[i_vtx] + IQM_VERTEX_INDICES);
			vec4 bone_weights = get_model_float4(model_id, idx[i_vtx] + IQM_VERTEX_WEIGHTS);
			float weight_sum = 0;

			for (int i_bone = 0; i_bone < 4; i_bone++)
			{
				uint bone_index = (bone_indices >> (i_bone * 8)) & 0xff;
				float bone_weight = bone_weights[i_bone];

				if (bone_weight > 0)
				{
					mat3x4 m = get_iqm_matrix(matrix_offset + bone_index);
					transform += m * bone_weight;
					weight_sum += bone_weight;
				}
			}

			if (weight_sum > 0) // should always sum up to 1 by IQM definition, but maybe the data is missing altogether?
			{
				t.positions[i_vtx] = vec4(t.positions[i_vtx], 1.0) * transform;
				t.normals[i_vtx] = normalize(vec4(t.normals[i_vtx], 0.0) * transform);
				t.tangents[i_vtx] = normalize(vec4(t.tangents[i_vtx], 0.0) * transform);
			}
		}
	}

	t.material_id = 0; // needs to come from uniform buffer
	t.cluster = ~0u;
	t.instance = 0;
	t.emissive_factor = 1;
	t.texel_density = 0;

	return t;
}

#define LOCAL_SIZE_X 512

layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

void
main()
{
	uint instance_id = gl_WorkGroupID.x;

	int model_index = instance_buffer.model_indices[instance_id];

	bool is_world = (model_index & 0x80000000) != 0;
	uint buf_offset, num_triangles;

	if(is_world)
	{
		instance_id = ~model_index;
		buf_offset = instance_buffer.bsp_instance_buf_offset[instance_id];
		num_triangles = instance_buffer.bsp_instance_buf_size[instance_id];
	}
	else
	{
		instance_id = model_index;
		buf_offset = instance_buffer.model_instance_buf_offset[instance_id];
		num_triangles = instance_buffer.model_instance_buf_size[instance_id];
	}

	for(uint idx = gl_LocalInvocationID.x; idx < num_triangles; idx += LOCAL_SIZE_X)
	{
		Triangle t_i;
		mat4 M_curr = mat4(1.0);
		mat4 M_prev = mat4(1.0);

		if(is_world) {
			uint id = instance_id;
			Triangle t = load_triangle(VERTEX_BUFFER_WORLD, idx + instance_buffer.bsp_prim_offset[id]);
			M_curr = instance_buffer.bsp_mesh_instances[id].M;
			uint id_prev = instance_buffer.world_current_to_prev[id];
			M_prev = instance_buffer.bsp_mesh_instances_prev[id_prev].M;

			t_i.positions      = t.positions;
			t_i.positions_prev = t.positions; /* no vertex anim for bsp meshes */
			t_i.tangents       = t.tangents;
			t_i.normals        = t.normals;
			t_i.tex_coords     = t.tex_coords;
			t_i.texel_density  = t.texel_density;
			t_i.cluster = instance_buffer.bsp_cluster_id[id];

			int frame = instance_buffer.bsp_mesh_instances[id].frame.x;
			if(frame > 0)
			{
				uint material = t.material_id;
				MaterialInfo minfo = get_material_info(material);
				frame = frame % int(minfo.num_frames);

				while(frame --> 0) {
					material = minfo.next_frame;
					minfo = get_material_info(material);
				}

				t_i.material_id = material | (t.material_id & ~MATERIAL_INDEX_MASK); // preserve flags
			}
			else
			{
				t_i.material_id    = t.material_id;
			}
		}
		else { /* model */
			ModelInstance mi_curr = instance_buffer.model_instances[instance_id];
			M_curr = mi_curr.M;

			uint id_prev = instance_buffer.model_current_to_prev[instance_id];
			ModelInstance mi_prev = mi_curr;
			if(id_prev != ~0u)
			{
				mi_prev = instance_buffer.model_instances_prev[id_prev];
			}


			if (mi_curr.is_iqm != 0)
			{
				t_i = get_iqm_triangle(mi_curr.model_index, idx, mi_curr.idx_offset, mi_curr.offset_curr, mi_curr.offset_prev);

				if (id_prev != ~0u)
				{
					Triangle t_prev = get_iqm_triangle(mi_prev.model_index, idx, mi_prev.idx_offset, mi_prev.offset_curr, mi_prev.offset_prev);
					t_i.positions_prev = t_prev.positions;
					M_prev = mi_prev.M;
				}
				else
				{
					t_i.positions_prev = t_i.positions;
					M_prev = M_curr;
				}

				t_i.emissive_factor = mi_curr.alpha.x;
				t_i.material_id = mi_curr.material;
				// t_i.material_id |= MATERIAL_FLAG_HANDEDNESS; // not sure
				t_i.cluster = instance_buffer.model_cluster_id[instance_id];
			}
			else
			{
				{
					/* read and interpolate triangles for model for _current_ frame */
					Triangle t = get_model_triangle(mi_curr.model_index, idx, mi_curr.idx_offset, mi_curr.offset_curr);
					Triangle t_prev = get_model_triangle(mi_curr.model_index, idx, mi_curr.idx_offset, mi_curr.offset_prev);

					float backlerp = mi_curr.backlerp;

					t_i.positions[0] = mix(t.positions[0], t_prev.positions[0], backlerp);
					t_i.positions[1] = mix(t.positions[1], t_prev.positions[1], backlerp);
					t_i.positions[2] = mix(t.positions[2], t_prev.positions[2], backlerp);

					t_i.normals[0] = mix(t.normals[0], t_prev.normals[0], backlerp);
					t_i.normals[1] = mix(t.normals[1], t_prev.normals[1], backlerp);
					t_i.normals[2] = mix(t.normals[2], t_prev.normals[2], backlerp);

					t_i.tex_coords  = t.tex_coords;

					bool handedness = false;
					t_i.tangents[0].xyz = compute_tangent(t_i.positions, t_i.tex_coords, t_i.normals, handedness);
					t_i.tangents[1].xyz = t_i.tangents[0].xyz;
					t_i.tangents[2].xyz = t_i.tangents[0].xyz;

					t_i.emissive_factor = mi_curr.alpha.x;
					t_i.texel_density = t.texel_density;

					t_i.material_id = mi_curr.material;
					t_i.material_id |= handedness ? MATERIAL_FLAG_HANDEDNESS : 0;
					t_i.cluster = instance_buffer.model_cluster_id[instance_id];
				}
			
				if(id_prev != ~0u)
				{
					/* read and interpolate triangles for model for _previous_ frame */
					Triangle t = get_model_triangle(mi_prev.model_index, idx, mi_prev.idx_offset, mi_prev.offset_curr);
					Triangle t_prev = get_model_triangle(mi_prev.model_index, idx, mi_prev.idx_offset, mi_prev.offset_prev);
					M_prev = mi_prev.M;

					float backlerp = mi_prev.backlerp;

					t_i.positions_prev[0] = mix(t.positions[0], t_prev.positions[0], backlerp);
					t_i.positions_prev[1] = mix(t.positions[1], t_prev.positions[1], backlerp);
					t_i.positions_prev[2] = mix(t.positions[2], t_prev.positions[2], backlerp);
				}
				else
				{
					M_prev = M_curr;

					t_i.positions_prev[0] = t_i.positions[0];
					t_i.positions_prev[1] = t_i.positions[1];
					t_i.positions_prev[2] = t_i.positions[2];
				}
			}
		}

		t_i.positions[0] = vec3(M_curr * vec4(t_i.positions[0], 1.0));
		t_i.positions[1] = vec3(M_curr * vec4(t_i.positions[1], 1.0));
		t_i.positions[2] = vec3(M_curr * vec4(t_i.positions[2], 1.0));

		t_i.positions_prev[0] = vec3(M_prev * vec4(t_i.positions_prev[0], 1.0));
		t_i.positions_prev[1] = vec3(M_prev * vec4(t_i.positions_prev[1], 1.0));
		t_i.positions_prev[2] = vec3(M_prev * vec4(t_i.positions_prev[2], 1.0));

		t_i.normals[0] = vec3(M_curr * vec4(t_i.normals[0], 0.0));
		t_i.normals[1] = vec3(M_curr * vec4(t_i.normals[1], 0.0));
		t_i.normals[2] = vec3(M_curr * vec4(t_i.normals[2], 0.0));

		t_i.tangents[0] = vec3(M_curr * vec4(t_i.tangents[0], 0.0));
		t_i.tangents[1] = vec3(M_curr * vec4(t_i.tangents[1], 0.0));
		t_i.tangents[2] = vec3(M_curr * vec4(t_i.tangents[2], 0.0));

		t_i.instance = visbuf_pack_instance(instance_id, idx, is_world);

		store_triangle(t_i, VERTEX_BUFFER_INSTANCED, idx + buf_offset);	
	}
}

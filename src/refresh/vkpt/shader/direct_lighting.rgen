/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This rgen shader computes direct lighting for the first opaque surface. 
// The parameters of that surface are loaded from the G-buffer, stored there
// previously by the `primary_rays.rgen` and `reflect_refract.rgen` shaders.
//
// See `path_tracer.h` for an overview of the path tracer.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#pragma optionNV(unroll all)

#define ENABLE_SHADOW_CAUSTICS
#include "path_tracer_rgen.h"
#include "projection.glsl"

layout(constant_id = 0) const uint spec_enable_caustics = 0;

void
direct_lighting(ivec2 ipos, bool is_odd_checkerboard, out vec3 high_freq, out vec3 o_specular)
{
	high_freq = vec3(0);
	o_specular = vec3(0);

	rng_seed = texelFetch(TEX_ASVGF_RNG_SEED_A, ipos, 0).r;


	vec4 position_material = texelFetch(TEX_PT_SHADING_POSITION, ipos, 0);
	
	vec3 position   = position_material.xyz;
	uint material_id = floatBitsToUint(position_material.w);

	// don't compute lighting for invalid surfaces
	if(material_id == 0)
		return;

	vec4 view_direction = texelFetch(TEX_PT_VIEW_DIRECTION, ipos, 0);
	vec3 normal = decode_normal(texelFetch(TEX_PT_NORMAL_A, ipos, 0).x);
    vec3 geo_normal = decode_normal(texelFetch(TEX_PT_GEO_NORMAL_A, ipos, 0).x);
    vec4 primary_base_color = texelFetch(TEX_PT_BASE_COLOR_A, ipos, 0);
    float primary_specular_factor = primary_base_color.a;
    vec2 metal_rough = texelFetch(TEX_PT_METALLIC_A, ipos, 0).xy;
    float primary_metallic = metal_rough.x;
	float primary_roughness = metal_rough.y;
	uint cluster_idx = texelFetch(TEX_PT_CLUSTER_A, ipos, 0).x;
	if(cluster_idx == 0xffff) cluster_idx = ~0u; // because the image is uint16

	bool primary_is_weapon = (material_id & MATERIAL_FLAG_WEAPON) != 0;
	int primary_medium = int((material_id & MATERIAL_LIGHT_STYLE_MASK) >> MATERIAL_LIGHT_STYLE_SHIFT);

	int shadow_cull_mask = SHADOW_RAY_CULL_MASK;

	if(global_ubo.first_person_model != 0 && !primary_is_weapon)
		shadow_cull_mask |= AS_FLAG_VIEWER_MODELS;
	else
		shadow_cull_mask |= AS_FLAG_VIEWER_WEAPON;

	float direct_specular_weight = smoothstep(
		global_ubo.pt_direct_roughness_threshold - 0.02, 
		global_ubo.pt_direct_roughness_threshold + 0.02, 
		primary_roughness);

	bool is_gradient = get_is_gradient(ipos);

    vec3 primary_albedo, primary_base_reflectivity;
    get_reflectivity(primary_base_color.rgb, primary_metallic, primary_albedo, primary_base_reflectivity);

	vec3 direct_diffuse, direct_specular;
    get_direct_illumination(
    	position, 
    	normal, 
    	geo_normal, 
    	cluster_idx, 
    	material_id, 
    	shadow_cull_mask, 
    	view_direction.xyz, 
    	primary_albedo,
    	primary_base_reflectivity,
    	primary_specular_factor,
    	primary_roughness, 
    	primary_medium, 
    	spec_enable_caustics != 0, 
    	direct_specular_weight, 
    	global_ubo.pt_direct_polygon_lights > 0,
    	global_ubo.pt_direct_sphere_lights > 0,
    	is_gradient,
    	0,
    	direct_diffuse,
    	direct_specular);

    high_freq += direct_diffuse;
    o_specular += direct_specular;
	
	if(global_ubo.pt_direct_sun_light != 0)
	{
		vec3 direct_sun_diffuse, direct_sun_specular;
		get_sunlight(
			cluster_idx,
			material_id,
			position,
			normal,
			geo_normal,
			view_direction.xyz,
			primary_base_reflectivity,
			primary_specular_factor,
			primary_roughness,
			primary_medium,
			spec_enable_caustics != 0,
			direct_sun_diffuse,
			direct_sun_specular,
			shadow_cull_mask);

		high_freq += direct_sun_diffuse;
		o_specular += direct_sun_specular;
	}

	o_specular = demodulate_specular(primary_base_reflectivity, o_specular);

	high_freq = clamp_output(high_freq);
	o_specular = clamp_output(o_specular);
}

void
main() 
{
	ivec2 ipos = ivec2(rt_LaunchID.xy);
	if(rt_LaunchID.z != 0)
		ipos.x += global_ubo.width / 2;

	bool is_odd_checkerboard = (rt_LaunchID.z != 0) || (push_constants.gpu_index == 1);

	vec3 high_freq, specular;
	direct_lighting(ipos, is_odd_checkerboard, high_freq, specular);

	high_freq *= STORAGE_SCALE_HF;
	specular *= STORAGE_SCALE_SPEC;
	
	imageStore(IMG_PT_COLOR_LF_SH, ipos, vec4(0));
	imageStore(IMG_PT_COLOR_LF_COCG, ipos, vec4(0));
	imageStore(IMG_PT_COLOR_HF, ipos, uvec4(packRGBE(high_freq)));
	imageStore(IMG_PT_COLOR_SPEC, ipos, uvec4(packRGBE(specular)));
}

/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader computes volumetric lighting ("god rays") effects for a given 
// frame by marching rays through a shadow map. Volumetric lighting is computed
// in half resolution for performance, and then filtered to remove some noise
// that is used in the tracing pass to remove banding.
// ========================================================================== //

#version 460
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "constants.h"
#include "utils.glsl"

#define GOD_RAYS_DESC_SET_IDX 0
#include "god_rays_shared.h"

#define GLOBAL_UBO_DESC_SET_IDX 2
#include "global_ubo.h"

#define VERTEX_BUFFER_DESC_SET_IDX 1
#define VERTEX_READONLY 1
#include "vertex_buffer.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 3
#include "global_textures.h"

#include "water.glsl"

float GetShadow(vec3 worldPos, out float distanceToWater)
{
	vec4 uvzShadow = global_ubo.shadow_map_VP * vec4(worldPos, 1);
	uvzShadow.x = uvzShadow.x * 0.5 + 0.5;
	uvzShadow.y = 0.5 - 0.5 * uvzShadow.y;

	float depthOpaque = textureLod(TEX_SHADOW_MAP, vec3(uvzShadow.xy, 0), 0).x;
	float depthWater = textureLod(TEX_SHADOW_MAP, vec3(uvzShadow.xy, 1), 0).x;

	distanceToWater = max(0, uvzShadow.z - depthWater) * global_ubo.shadow_map_depth_scale;

	return depthOpaque > uvzShadow.z ? 1 : 0;
}

float rand(ivec2 pos)
{
    int texnum = global_ubo.current_frame_idx & (NUM_BLUE_NOISE_TEX - 1);
    ivec2 texpos = pos & ivec2(BLUE_NOISE_RES - 1);
    float noise = texelFetch(TEX_BLUE_NOISE, ivec3(texpos, texnum), 0).r;
    return noise;
}

const float PI = 3.1415926535;

#define NORMALIZE_PHASE_FUNCTIONS 1

float ScatterPhase_HenyeyGreenstein(float cosa, float g)
{
#if NORMALIZE_PHASE_FUNCTIONS
	// "normalized" Henyey-Greenstein
	float g_sqr = g * g;
	float num = (1 - abs(g));
	float denom = sqrt(max(1 - 2 * g*cosa + g_sqr, 0));
	float frac = num / denom;
	float scale = g_sqr + (1 - g_sqr) / (4 * PI);
	return scale * (frac*frac*frac);
#else
	// Classic Henyey-Greenstein
	float k1 = (1.f - g * g);
	float k2 = (1.f + g * g - 2.f*g*cosa);
	return (1.f / (4.f*PI)) * k1 / pow(abs(k2), 1.5f);
#endif
}

float vmin(vec3 v) { return min(v.x, min(v.y, v.z)); }
float vmax(vec3 v) { return max(v.x, max(v.y, v.z)); }

bool IntersectRayBox(vec3 origin, vec3 direction, vec3 mins, vec3 maxs, out float tIn, out float tOut)
{
	vec3 t1 = (mins - origin) / direction;
	vec3 t2 = (maxs - origin) / direction;
	tIn = vmax(min(t1, t2));
	tOut = vmin(max(t1, t2));

	return tIn < tOut && tOut > 0;
}

float getDensity(vec3 p)
{
	// function that is 1.0 within the world box, and trails off to 0 by 25% of world size outside the box
	vec3 bounds = clamp(3.0 - 2.0 * abs((p - global_ubo.world_center.xyz) * global_ubo.world_half_size_inv.xyz), vec3(0), vec3(1));

	return bounds.x * bounds.y * bounds.z;
}

float getStep(float t, float density)
{
	return max(1, mix(20, 5, density));
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
	vec3 sun_color = sun_color_ubo.sun_color;
	if(luminance(sun_color) == 0)
	{
		imageStore(IMG_GODRAYS_INTERMEDIATE, ivec2(gl_GlobalInvocationID.xy), vec4(0));
		return;
	}
		
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
	ivec2 sourcePixelPos = pixelPos.xy * 2 + GetRotatedGridOffset(pixelPos.xy);

	if (sourcePixelPos.x >= global_ubo.width || sourcePixelPos.y >= global_ubo.height)
		return;

	if(push.pass_index != 0)
	{
		float view_depth = texelFetch(TEX_PT_VIEW_DEPTH_A, sourcePixelPos.xy, 0).x;
		if(view_depth >= 0)
		{
			return;
		}
	}

	vec4 position_material = texelFetch(TEX_PT_SHADING_POSITION, sourcePixelPos.xy, 0);
	vec3 surface_pos = position_material.xyz;
	uint material_id = floatBitsToUint(position_material.w);
	int medium = int((material_id & MATERIAL_LIGHT_STYLE_MASK) >> MATERIAL_LIGHT_STYLE_SHIFT);

	vec3 direction = texelFetch(TEX_PT_VIEW_DIRECTION, sourcePixelPos.xy, 0).xyz;

	vec4 throughput_distance = texelFetch(TEX_PT_GODRAYS_THROUGHPUT_DIST, sourcePixelPos.xy, 0);
	float distance = throughput_distance.w;

	vec3 original_pos = surface_pos - direction * distance;
	
	float cosa = dot(direction, global_ubo.sun_direction);
	float eccentricity = global_ubo.god_rays_eccentricity;
	if(medium != MEDIUM_NONE)
		eccentricity = 0.5;
	float phase = ScatterPhase_HenyeyGreenstein(cosa, eccentricity);

	float offset = 0;

	float tIn, tOut;
	if (IntersectRayBox(
		original_pos,
		direction,
		global_ubo.world_center.xyz - global_ubo.world_size.xyz * 0.75, // matches the 'bounds' function in getDensity(...)
		global_ubo.world_center.xyz + global_ubo.world_size.xyz * 0.75,
		tIn, tOut))
	{	
		if (tIn > distance)
		{
			imageStore(IMG_GODRAYS_INTERMEDIATE, ivec2(gl_GlobalInvocationID.xy), vec4(0));
			return;
		}

		offset = max(tIn, offset);
		distance = min(tOut, distance);
	}
	else
	{
		imageStore(IMG_GODRAYS_INTERMEDIATE, ivec2(gl_GlobalInvocationID.xy), vec4(0));
		return;
	}

	vec3 currentPos = original_pos + direction * offset;
	float density = getDensity(currentPos);

	vec3 extinction_factors = (medium == MEDIUM_NONE) ? vec3(0.0001) : get_extinction_factors(medium);

	vec3 throughput = throughput_distance.xyz;
	vec3 inscatter = vec3(0);

	offset += getStep(offset, density) * (rand(pixelPos.xy) - 1);

	while(true)
	{
		float density = getDensity(currentPos);
		float stepLength = getStep(offset, density);

		offset += stepLength;

		if (offset >= distance)
			break;

		currentPos = original_pos + direction * offset;

		const vec3 shadowBias = -global_ubo.sun_direction * 20;
		float distanceToWater;
		float shadow = GetShadow(currentPos + shadowBias, distanceToWater);

		vec3 differentialInscatter = (shadow * phase * stepLength * density) * throughput;
		if(medium != MEDIUM_NONE)
		{
			differentialInscatter *= exp(-extinction_factors * distanceToWater);
		}

		inscatter += differentialInscatter;
		throughput *= exp(-(stepLength * density) * extinction_factors);
	}

	vec3 inscatterColor = inscatter * sun_color_ubo.sun_color * global_ubo.god_rays_intensity * 0.0001;

	if(medium != MEDIUM_NONE)
		inscatterColor *= global_ubo.pt_water_density * 30;
	
	vec4 prevColor;

	if(push.pass_index != 0)
		prevColor = imageLoad(IMG_GODRAYS_INTERMEDIATE, ivec2(gl_GlobalInvocationID.xy));
	else
		prevColor = vec4(0);

	vec4 outputColor = vec4(inscatterColor + prevColor.rgb, 1);

	imageStore(IMG_GODRAYS_INTERMEDIATE, ivec2(gl_GlobalInvocationID.xy), outputColor);
}

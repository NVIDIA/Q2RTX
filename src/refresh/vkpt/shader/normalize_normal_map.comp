/*
Copyright (C) 2021, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#version 460
#extension GL_EXT_nonuniform_qualifier    : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2D global_texture_images[];

layout(push_constant, std430) uniform PushConstants {
    uint texture_index;
} push;

void
main()
{
    ivec2 ipos = ivec2(gl_GlobalInvocationID);

    vec4 value = imageLoad(global_texture_images[push.texture_index], ipos);

    value.xy = value.xy * 2.0 - vec2(1.0);
    
    float len = length(value.xyz);
    if (len == 0)
        value.xyz = vec3(0.0, 0.0, 1.0);
    else
        value.xyz /= len;
    
    value.xy = value.xy * 0.5 + vec2(0.5);

    imageStore(global_texture_images[push.texture_index], ipos, value);
}
